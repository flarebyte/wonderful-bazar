'use strict'
flaming_models = require('flaming-models')
should = require('should')
CT = require('flaming-constant')
_ = require('lodash')


###
======== A Handy Little Mocha Reference ========
https://github.com/visionmedia/should.js
https://github.com/visionmedia/mocha
###

OPTIONAL = [0,1]
REQUIRED = [1,1]
AT_LEAST_ONE = [1,5]
ANY = [0,5]

T_ANYCHAR=            "anychar"
T_DATE_TIME=          "date_time"
T_DIGIT=              "digit"
T_EID=                "eid"
T_EMAIL=              "email"
T_ENUM=               "enumeration"
T_FLOAT=              "float"
T_ID=                 "id"
T_IGNORE=             "ignore"
T_INTEGER=            "integer"
T_NAME=               "name"
T_NUMBER=             "number"
T_PROFILE=            "profile_ref"
T_SUMM=               "summary"
T_TAG=                "tag"
T_TITLE=              "title"
T_URL=                "url"

XL= 100


describe 'flaming-models', ()->

  describe '#safeCopy()', ()->
    it 'generates safe copy', ()->
      missing=
        "profileRef":       "profileRef"
        #"spam":             "spam"
        "accepted":         "accepted"
        "important":        "important"
        "userTags":         "userTags"
        "profileType":     "profileType"
      corrupted= _.cloneDeep missing
      corrupted["corrupted"]="corrupted"
      datat= flaming_models.safeCopy "contact.view", corrupted
      datat.should.eql(missing)

  describe '#isSimpleElementValid()', ()->
    btypes= flaming_models.BASIC_TYPES
    it 'checks all basic types', ()->
      for btype in btypes
        r= flaming_models.isSimpleElementValid [btype,0,100,["alpha",12]],
        "anything"
        r.should.not.be.null
    #Just String or Integer
    it 'refuses outside integer, boolean or string', ()->
      r= flaming_models.isSimpleElementValid ["ignore",0,100], {a:"b"}
      r.should.not.be.ok
    #T_NUMBER
    it 'accepts number', ()->
      r= flaming_models.isSimpleElementValid [T_NUMBER,0,200,[]], 123.4
      r.should.be.ok
    it 'refuses not number', ()->
      r= flaming_models.isSimpleElementValid [T_NUMBER,0,100], "bad"
      r.should.not.be.ok
    it 'refuses number outside boundaries', ()->
      r= flaming_models.isSimpleElementValid [T_NUMBER,0,100], 123.4
      r.should.not.be.ok
    #T_FLOAT
    it 'accepts float', ()->
      r= flaming_models.isSimpleElementValid [T_FLOAT,0,200.5,[]], 123.4
      r.should.be.ok
    it 'refuses not float', ()->
      r= flaming_models.isSimpleElementValid [T_FLOAT,0,100], "bad"
      r.should.not.be.ok
    it 'refuses float outside boundaries', ()->
      r= flaming_models.isSimpleElementValid [T_FLOAT,0,100], 123.4
      r.should.not.be.ok
    #T_INTEGER
    it 'accepts integer', ()->
      r= flaming_models.isSimpleElementValid [T_INTEGER,0,200,[]], 123
      r.should.be.ok
    it 'refuses not integer', ()->
      r= flaming_models.isSimpleElementValid [T_INTEGER,0,100], 66.6
      r.should.not.be.ok
    it 'refuses integer outside boundaries', ()->
      r= flaming_models.isSimpleElementValid [T_INTEGER,0,100], 123
      r.should.not.be.ok

    #
    it 'accepts empty if included', ()->
      r= flaming_models.isSimpleElementValid ["ignore",0,10], ""
      r.should.be.ok
    it 'refuses empty if excluded', ()->
      r= flaming_models.isSimpleElementValid ["ignore",1,10], ""
      r.should.not.be.ok
    it 'checks within boundaries', ()->
      r= flaming_models.isSimpleElementValid [T_NAME,1,10], "alpha"
      r.should.be.ok
    it 'refuses outside boundaries', ()->
      r= flaming_models.isSimpleElementValid [T_NAME,1,3], "abcd"
      r.should.not.be.ok
    #T_ANYCHAR
    it 'accepts valid '+T_ANYCHAR, ()->
      r= flaming_models.isSimpleElementValid [T_ANYCHAR,1,30],
      "jean-jacques Abc Defghij'aa"
      r.should.be.ok
    it 'refuses invalid '+T_ANYCHAR, ()->
      r= flaming_models.isSimpleElementValid [T_ANYCHAR,1,20], 12
      r.should.not.be.ok
   #T_NAME
    it 'accepts valid '+T_NAME, ()->
      r= flaming_models.isSimpleElementValid [T_NAME,1,30],
      "jean-jacques Abc Defghij'aa"
      r.should.be.ok
    it 'refuses invalid '+T_NAME, ()->
      r= flaming_models.isSimpleElementValid [T_NAME,1,20], "abc4"
      r.should.not.be.ok
    #T_DATE_TIME
    it 'accepts valid '+T_DATE_TIME, ()->
      model= [T_DATE_TIME,1,XL]
      r= flaming_models.isSimpleElementValid model,
      CT.EX_ISO_DATETIME
      r.should.be.ok
    it 'refuses invalid '+T_DATE_TIME, ()->
      model= [T_DATE_TIME,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "01/02/03"
      r.should.not.be.ok
    #T_DIGIT
    it 'accepts valid '+T_DIGIT, ()->
      model= [T_DIGIT,1,3]
      r= flaming_models.isSimpleElementValid model,
      "123"
      r.should.be.ok
    it 'refuses invalid '+T_DIGIT, ()->
      model= [T_DIGIT,1,5]
      r= flaming_models.isSimpleElementValid model,
      "12.3"
      r.should.not.be.ok
    #T_EMAIL
    it 'accepts valid '+T_EMAIL, ()->
      model= [T_EMAIL,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "olivier.H7830@gmail.com"
      r.should.be.ok
    it 'refuses invalid '+T_EMAIL, ()->
      model= [T_EMAIL,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "olivier"
      r.should.not.be.ok
    #T_ENUM
    it 'accepts valid '+T_ENUM, ()->
      model= [T_ENUM,1,XL,["alpha","beta"]]
      r= flaming_models.isSimpleElementValid model,
      "beta"
      r.should.be.ok
    it 'refuses invalid '+T_ENUM, ()->
      model= [T_ENUM,1,XL, ["alpha","beta"]]
      r= flaming_models.isSimpleElementValid model,
      "charlie"
      r.should.not.be.ok
    #T_ID
    it 'accepts valid '+T_ID, ()->
      model= [T_ID,1,XL,["alpha:",6]]
      r= flaming_models.isSimpleElementValid model,
      "alpha:123456"
      r.should.be.ok
    it 'refuses invalid prefix '+T_ID, ()->
      model= [T_ID,1,XL,["alpha:",6]]
      r= flaming_models.isSimpleElementValid model,
      "bravo:123456"
      r.should.not.be.ok
    it 'refuses invalid id '+T_ID, ()->
      model= [T_ID,1,XL,["alpha:",6]]
      r= flaming_models.isSimpleElementValid model,
      "alpha:1234567"
      r.should.not.be.ok
    it 'refuses dots in id '+T_ID, ()->
      model= [T_ID,1,XL,["alpha:",6]]
      r= flaming_models.isSimpleElementValid model,
      "alpha:123.45"
      r.should.not.be.ok
    #T_EID
    it 'accepts valid '+T_EID, ()->
      model= [T_EID,1,XL,["alpha:",6]]
      r= flaming_models.isSimpleElementValid model,
      "alpha:123456"
      r.should.be.ok
    it 'refuses invalid '+T_EID, ()->
      model= [T_EID,1,XL, ["alpha:",6]]
      r= flaming_models.isSimpleElementValid model,
      "bravo:123456"
      r.should.not.be.ok
    #T_PROFILE
    it 'accepts valid '+T_PROFILE, ()->
      model= [T_PROFILE,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "email:olivier.H7830@gmail.com"
      r.should.be.ok
    it 'refuses invalid '+T_PROFILE, ()->
      model= [T_PROFILE,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "olivier.noprefix@gmail.com"
      r.should.not.be.ok
    #T_SUMM
    it 'accepts valid '+T_SUMM, ()->
      model= [T_SUMM,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "jean-jacques Abc Defghij'aa"
      r.should.be.ok
    it 'refuses invalid '+T_SUMM, ()->
      model= [T_SUMM,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "{} ';"
      r.should.not.be.ok
    #T_TAG
    it 'accepts valid '+T_TAG, ()->
      model= [T_TAG,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "jean-jacques Abc Defghij aa"
      r.should.be.ok
    it 'refuses invalid '+T_TAG, ()->
      model= [T_TAG,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "{}"
      r.should.not.be.ok
    #T_TITLE
    it 'accepts valid '+T_TITLE, ()->
      model= [T_TITLE,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "jean-jacques Abc Defghij'aa"
      r.should.be.ok
    it 'refuses invalid '+T_TITLE, ()->
      model= [T_TITLE,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "{}"
      r.should.not.be.ok
    #T_URL
    it 'accepts valid '+T_URL, ()->
      model= [T_URL,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "http://www.flarebyte.co.uk"
      r.should.be.ok
    it 'refuses invalid '+T_URL, ()->
      model= [T_URL,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "/no/url"
      r.should.not.be.ok
    it 'refuses localhost '+T_URL, ()->
      model= [T_URL,1,XL]
      r= flaming_models.isSimpleElementValid model,
      "localhost"
      r.should.not.be.ok

  ANYSTUFF = ["any",1,10,[]]
  describe '#isFieldElementValid()', ()->
   # Collections
    it 'accepts null if optional', ()->
      r= flaming_models.isFieldElementValid [ANYSTUFF,OPTIONAL], null
      r.should.be.ok
    it 'refuses null if required', ()->
      r= flaming_models.isFieldElementValid [ANYSTUFF,REQUIRED], null
      r.should.not.be.ok
    it 'refuses null if any', ()->
      r= flaming_models.isFieldElementValid [ANYSTUFF,ANY], null
      r.should.not.be.ok
    it 'accept [] if any', ()->
      r= flaming_models.isFieldElementValid [ANYSTUFF,ANY], []
      r.should.be.ok
    it 'does not accept [] if at least one', ()->
      r= flaming_models.isFieldElementValid [ANYSTUFF,AT_LEAST_ONE], []
      r.should.not.be.ok
    it 'accept list of emails', ()->
      model= [T_EMAIL,1,XL]
      r= flaming_models.isFieldElementValid [model,AT_LEAST_ONE],
      ["olivier@gmail.com","roland@gmail.com"]
      r.should.be.ok
    it 'should refuses invalid list of emails', ()->
      model= [T_EMAIL,1,XL]
      r= flaming_models.isFieldElementValid [model,AT_LEAST_ONE],
      ["olivier@gmail.com","roland"]
      r.should.not.be.ok
    it 'accept list of emails if any', ()->
      model= [T_EMAIL,1,XL]
      r= flaming_models.isFieldElementValid [model,ANY],
      ["olivier@gmail.com","roland@gmail.com"]
      r.should.be.ok
    it 'should refuses invalid list of emails if any', ()->
      model= [T_EMAIL,1,XL]
      r= flaming_models.isFieldElementValid [model,ANY],
      ["olivier@gmail.com","roland"]
      r.should.not.be.ok


  describe '#validate()', ()->
    it 'validates valid model', ()->
      data=
        "profileRef":       "email:olivier.H7830@gmail.com"
        "spam":             "yes"
        "accepted":         "no"
        "important":        "yes"
        "userTags":         ["programmer"]
      datat= flaming_models.validate "contact.create", data
      datat.should.eql({})
    it 'does not validate model if invalid', ()->
      data=
        "profileRef":       "email:olivier.H7830@gmail.com"
        "spam":             "bad"
        "accepted":         "no"
        "important":        "yes"
        "userTags":         ["tag"]
      datat= flaming_models.validate "contact.create", data
      datat.should.eql({ spam: 'bad'})

  unencrypted = "magma:user/123456789012"
  encrypted = '2795e64ec2349a6f0ce021c561da0c96287fc2bdd56c8091'
  passw = 'goodpassword'
  describe '#elementToDB()', ()->
    #Just String or Integer
    it 'decrypts id', ()->
      r= flaming_models.elementToDB ["id",0,100], passw, encrypted
      r.should.eql(unencrypted)
  describe '#elementFromDB()', ()->
    #Just String or Integer
    it 'encrypts id', ()->
      r= flaming_models.elementFromDB ["id",0,100], passw, unencrypted
      r.should.eql(encrypted)


