'use strict'
init = require("fb-custom-init")
magma_plugin_db = require('magma-plugin-db')
should = require('should')
CT = require('magma-constant')
_ = require('lodash')
util = require('util')

simpleModel=
  __meta:
    domain:         "user"
    recordType:     CT.TYPE_USER_ID
    idLength:       CT.LEN_USER_ID
    pkGenerator:    ()->"pk33"

myself=
  ownerRef:         CT.EX_OWNER_U1
  gateId:           CT.EX_GATE_ID
  ownerRefs:        [CT.EX_OWNER_U1,CT.EX_OWNER_U2]

###
======== A Handy Little Mocha Reference ========
https://github.com/visionmedia/should.js
https://github.com/visionmedia/mocha
###

describe "magma-plugin-db", ->
  describe '#pairToMap()', ()->
    it 'convert a pair to a map', ()->
      expected= { Name: 'alpha', Value: 'bravo', Replace: true }
      m=magma_plugin_db.pairToMap('alpha','bravo',true)
      m.should.eql(expected)

  describe '#mapToPair()', ()->
    it 'convert a pair to a map', ()->
      given= { Name: 'alpha', Value: 'bravo', Replace: true }
      obj= {"mustbe": "ok"}
      expected= { mustbe: 'ok', alpha: 'bravo' }
      pair=magma_plugin_db.mapToPair(given,obj)
      pair.should.eql(expected)

    it 'appends pair if existing there', ()->
      given= { Name: 'alpha', Value: 'bravo', Replace: true }
      obj= {"mustbe": "ok", alpha:"previous"}
      expected= { mustbe: 'ok', alpha: ['previous','bravo'] }
      pair=magma_plugin_db.mapToPair(given,obj)
      pair.should.eql(expected)

  describe '#objToSimpleObject()', ()->
    it 'convert an object to Amazon SDB object', ()->
      given= { alpha: 'bravo', beta: ["charlie","tango"],__hidden: "any"}
      expected = [
        Name: "alpha"
        Value: "bravo"
        Replace: true
      ,
        Name: "beta"
        Value: "charlie"
        Replace: true
      ,
        Name: "beta"
        Value: "tango"
        Replace: true
      ]
      r= magma_plugin_db.objToSimpleObject(given)
      r.should.eql(expected)

  describe '#simpleObjectToObj()', ()->
    it 'convert Amazon SDB object to object', ()->
      expected= { alpha: 'bravo', beta: ["charlie","tango"]}
      given = [
        Name: "alpha"
        Value: "bravo"
        Replace: true
      ,
        Name: "beta"
        Value: "charlie"
        Replace: true
      ,
        Name: "beta"
        Value: "tango"
        Replace: true
      ]
      r= magma_plugin_db.simpleObjectToObj(given)
      r.should.eql(expected)

  describe '#ensurePrimaryKey()', ()->
    it 'ensure a primary key is provided', ()->
      pkGen= (record)-> "id33"
      meta={pkGenerator:pkGen}
      model={__meta:meta}
      ctx= {model:model}
      given= { alpha: 'bravo'}
      expected= { alpha: 'bravo', primaryKey: "id33"}
      magma_plugin_db.ensurePrimaryKey(ctx, given)
      given.should.eql(expected)


  describe '#ensureId()', ()->
    it 'ensure an id is provided', ()->
      meta={recordType: "rt", idLength:8}
      model={__meta:meta}
      ctx= {model:model}
      given= { alpha: 'bravo'}
      magma_plugin_db.ensureId(ctx, given)
      given.id.should.have.length(10)

  describe '#ensureUpdated()', ()->
    it 'creates created and updated field', ()->
      ctx= {}
      given= { alpha: 'bravo'}
      magma_plugin_db.ensureUpdated(ctx, given)
      given.alpha.should.eql('bravo')
      given.updated.should.match(CT.REGEX_ISO_DATETIME)
      given.created.should.match(CT.REGEX_ISO_DATETIME)
    it 'updates created and updated field', ()->
      ctx= {}
      given= { alpha: 'bravo', created: 'yes', updated: 'sure'}
      magma_plugin_db.ensureUpdated(ctx, given)
      given.alpha.should.eql('bravo')
      given.updated.should.match(CT.REGEX_ISO_DATETIME)
      given.created.should.eql('yes')
      given.__hidden.previousUpdated.should.eql 'sure'

  describe '#expectedNewOrUpdate()', ()->
    it 'accepts no expectation', ()->
      ctx= {}
      given= { alpha: 'bravo'}
      r=magma_plugin_db.expectedNewOrUpdate(ctx, given)
      should.not.exist(r)
    it 'accepts new objects', ()->
      ctx= {}
      given= { alpha: 'bravo', __hidden: {state: 'new'}}
      expected= { Name: 'updated', Exists: false }
      r=magma_plugin_db.expectedNewOrUpdate(ctx, given)
      r.should.eql expected
    it 'accepts update of objects', ()->
      ctx= {}
      given= { alpha: 'bravo', __hidden: {state: 'update',previousUpdated: 'Y'}}
      expected= { Name: 'updated', Exists: true, Value: 'Y' }
      r=magma_plugin_db.expectedNewOrUpdate(ctx, given)
      r.should.eql expected

  describe '#toAttributes()', ()->
    it 'convert an object to Amazon Attributes', ()->
      ctx= {my: myself, model: simpleModel}
      given= { alpha: 'bravo', __hidden: "any"}
      r= magma_plugin_db.toAttributes(ctx, given)
      should.exist(r)

  describe '#toItems()', ()->
    it 'convert an objects to Amazon items', ()->
      ctx= {my: myself, model: simpleModel}
      given= [{ alpha: 'bravo', __hidden: "any"}]
      r= magma_plugin_db.toItems(ctx, given)
      should.exist(r)

  describe '#toIds()', ()->
    it 'convert an objects to Amazon items', ()->
      ctx= {model: simpleModel}
      given= [{ alpha: 'bravo', __hidden: "any",primaryKey:"key123"}]
      r= magma_plugin_db.toIds(ctx, given)
      should.exist(r)

  describe '#sqlQuote()', ()->
    it 'quotes SQL value', ()->
      expected= '\'o\'\'reilly\''
      m=magma_plugin_db.sqlQuote("o'reilly")
      m.should.eql(expected)

  describe '#sqlQuoteList()', ()->
    it 'quotes list of SQL values', ()->
      expected= '\'o\'\'reilly\',\'alpha\''
      m=magma_plugin_db.sqlQuoteList(["o'reilly","alpha"])
      m.should.eql(expected)
