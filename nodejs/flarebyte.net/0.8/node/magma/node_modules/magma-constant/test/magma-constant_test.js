// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var OPTIONAL, REQUIRED, magma_constant, should;

  magma_constant = require('magma-constant');

  should = require('should');


  /*
  ======== A Handy Little Mocha Reference ========
  https://github.com/visionmedia/should.js
  https://github.com/visionmedia/mocha
   */

  REQUIRED = "required";

  OPTIONAL = "optional";

  describe('magma-constant', function() {
    describe('#REGEX_GATE_ID()', function() {
      it('captures correct gate id ', function() {
        var v;
        v = magma_constant.EX_GATE_ID;
        return magma_constant.REGEX_GATE_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect gate id ', function() {
        var v;
        v = magma_constant.EX_GATE_ID + "000";
        return magma_constant.REGEX_GATE_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_UNIVERSE_ID()', function() {
      it('captures correct universe id ', function() {
        var v;
        v = magma_constant.EX_UNIVERSE_ID;
        return magma_constant.REGEX_UNIVERSE_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect gate id ', function() {
        var v;
        v = magma_constant.EX_UNIVERSE_ID + ";";
        return magma_constant.REGEX_UNIVERSE_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_VIEW_ID()', function() {
      it('captures correct view id ', function() {
        var v;
        v = magma_constant.EX_VIEW_ID;
        return magma_constant.REGEX_VIEW_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect view id ', function() {
        var v;
        v = magma_constant.EX_VIEW_ID + "aa";
        return magma_constant.REGEX_VIEW_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_USER_ID()', function() {
      it('captures correct user id ', function() {
        var v;
        v = magma_constant.EX_USER_ID;
        return magma_constant.REGEX_USER_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect user id ', function() {
        var v;
        v = magma_constant.EX_USER_ID + ";";
        return magma_constant.REGEX_USER_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_MESSAGE_ID()', function() {
      it('captures correct message id ', function() {
        var v;
        v = magma_constant.EX_MESSAGE_ID;
        return magma_constant.REGEX_MESSAGE_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect message id ', function() {
        var v;
        v = magma_constant.EX_MESSAGE_ID + ";";
        return magma_constant.REGEX_MESSAGE_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_ROLE_ID()', function() {
      it('captures correct role id ', function() {
        var v;
        v = magma_constant.EX_ROLE_ID;
        return magma_constant.REGEX_ROLE_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect role id ', function() {
        var v;
        v = magma_constant.EX_ROLE_ID + "<<";
        return magma_constant.REGEX_ROLE_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_TENANT_ID()', function() {
      it('captures correct tenant id ', function() {
        var v;
        v = magma_constant.EX_TENANT_ID;
        return magma_constant.REGEX_TENANT_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect tenant id ', function() {
        var v;
        v = magma_constant.EX_TENANT_ID + "?";
        return magma_constant.REGEX_TENANT_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_PLUGIN_ID()', function() {
      it('captures correct plugin id ', function() {
        var v;
        v = magma_constant.EX_PLUGIN_ID;
        return magma_constant.REGEX_PLUGIN_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect plugin id ', function() {
        var v;
        v = magma_constant.EX_PLUGIN_ID + "<<";
        return magma_constant.REGEX_PLUGIN_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_TASKTYPE_ID()', function() {
      it('captures correct tasktype id ', function() {
        var v;
        v = magma_constant.TASKTYPE_PARALLEL;
        return magma_constant.REGEX_TASKTYPE_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect tasktype id ', function() {
        var v;
        v = magma_constant.TASKTYPE_PARALLEL + "<<";
        return magma_constant.REGEX_TASKTYPE_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_PREDICATE_ID()', function() {
      it('captures correct predicate id ', function() {
        var v;
        v = magma_constant.EX_PREDICATE_ID;
        return magma_constant.REGEX_PREDICATE_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect predicate id ', function() {
        var v;
        v = magma_constant.EX_PREDICATE_ID + "<<";
        return magma_constant.REGEX_PREDICATE_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_AGREEMENT_ID()', function() {
      it('captures correct agreement id ', function() {
        var v;
        v = magma_constant.EX_AGREEMENT_ID;
        return magma_constant.REGEX_AGREEMENT_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect agreement id ', function() {
        var v;
        v = magma_constant.EX_AGREEMENT_ID + "<<";
        return magma_constant.REGEX_AGREEMENT_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_VIEW_PROPS_ID()', function() {
      it('captures correct view props id ', function() {
        var v;
        v = magma_constant.EX_VIEW_PROPS_ID;
        return magma_constant.REGEX_VIEW_PROPS_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect view props id ', function() {
        var v;
        v = magma_constant.EX_VIEW_PROPS_ID + "<<";
        return magma_constant.REGEX_VIEW_PROPS_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_VIEW_I18N_ID()', function() {
      it('captures correct view i18n id ', function() {
        var v;
        v = magma_constant.EX_VIEW_I18N_ID;
        return magma_constant.REGEX_VIEW_I18N_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect view i18n id ', function() {
        var v;
        v = magma_constant.EX_VIEW_I18N_ID + "<<";
        return magma_constant.REGEX_VIEW_I18N_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_NAME()', function() {
      it('captures correct name ', function() {
        var v;
        v = "good name";
        return magma_constant.REGEX_NAME.test(v).should.be["true"];
      });
      it('rejects incorrect name ', function() {
        var v;
        v = "<<bad name";
        return magma_constant.REGEX_NAME.test(v).should.be["false"];
      });
      return it('rejects incorrect space in name ', function() {
        var v;
        v = "big  space";
        return magma_constant.REGEX_NAME.test(v).should.be["false"];
      });
    });
    describe('#REGEX_VERB_ID()', function() {
      it('captures correct verb id ', function() {
        var v;
        v = magma_constant.VERB_GET;
        return magma_constant.REGEX_VERB_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect verb id ', function() {
        var v;
        v = magma_constant.VERT_PUT + "<<";
        return magma_constant.REGEX_VERB_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_ISO_DATE()', function() {
      it('captures correct iso date', function() {
        var v;
        v = magma_constant.EX_ISO_DATE;
        return magma_constant.REGEX_ISO_DATE.test(v).should.be["true"];
      });
      return it('rejects incorrect iso date', function() {
        var v;
        v = "01-02-2013";
        return magma_constant.REGEX_ISO_DATE.test(v).should.be["false"];
      });
    });
    describe('#REGEX_ISO_DATETIME()', function() {
      it('captures correct iso date time', function() {
        var v;
        v = magma_constant.EX_ISO_DATETIME;
        return magma_constant.REGEX_ISO_DATETIME.test(v).should.be["true"];
      });
      return it('rejects incorrect iso date time', function() {
        var v;
        v = "01-02-2013";
        return magma_constant.REGEX_ISO_DATE.test(v).should.be["false"];
      });
    });
    describe('#REGEX_DOMAIN_ID()', function() {
      it('captures correct domain id ', function() {
        var v;
        v = magma_constant.EX_DOMAIN_ID;
        return magma_constant.REGEX_DOMAIN_ID.test(v).should.be["true"];
      });
      return it('rejects incorrect domain id ', function() {
        var v;
        v = magma_constant.EX_DOMAIN_ID + "<<";
        return magma_constant.REGEX_DOMAIN_ID.test(v).should.be["false"];
      });
    });
    describe('#REGEX_DOMAIN_NAME()', function() {
      it('captures correct domain name ', function() {
        var v;
        v = magma_constant.EX_DOMAIN_NAME;
        return magma_constant.REGEX_DOMAIN_NAME.test(v).should.be["true"];
      });
      return it('rejects incorrect domain name', function() {
        var v;
        v = magma_constant.EX_DOMAIN_NAME + "<<";
        return magma_constant.REGEX_DOMAIN_NAME.test(v).should.be["false"];
      });
    });
    describe('hashId()', function() {
      return it('generate hash for an id', function() {
        var v;
        v = magma_constant.hashId("charles.baudelaire@gmail.com");
        return v.should.be.eql('ae663b54786aed38f8043055a9d022beb37b18d455d3908eb3d8f9aebf20f14d');
      });
    });
    return describe('validObjectFromModel()', function() {
      var modelGood;
      modelGood = {
        key1: [OPTIONAL, 'val2']
      };
      return it('validate an object from model', function() {
        var v;
        v = magma_constant.validObjectFromModel({}, modelGood);
        return (v === null).should.be["true"];
      });
    });
  });

}).call(this);

//# sourceMappingURL=magma-constant_test.map
