// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, configure, helpers;

  helpers = require('./helpers');

  AWS = helpers.AWS;

  configure = function(options) {
    return new AWS.Config(options);
  };

  describe('AWS.Config', function() {
    describe('constructor', function() {
      it('should be able to pass in a Config object as parameter', function() {
        var config, copyConfig;
        config = new AWS.Config({
          sslEnabled: false,
          maxRetries: 0
        });
        copyConfig = new AWS.Config(config);
        expect(copyConfig).not.toBe(config);
        expect(copyConfig.sslEnabled).toEqual(false);
        return expect(copyConfig.maxRetries).toEqual(0);
      });
      return it('should be able to pass credential values directly', function() {
        var config;
        config = new AWS.Config({
          accessKeyId: 'akid',
          secretAccessKey: 'secret',
          sessionToken: 'session'
        });
        expect(config.credentials.accessKeyId).toEqual('akid');
        expect(config.credentials.secretAccessKey).toEqual('secret');
        return expect(config.credentials.sessionToken).toEqual('session');
      });
    });
    describe('region', function() {
      var oldEnv;
      oldEnv = process.env;
      beforeEach(function() {
        return process.env = {};
      });
      afterEach(function() {
        return process.env = oldEnv;
      });
      it('defaults to undefined', function() {
        return expect(configure().region).toEqual(void 0);
      });
      it('grabs AWS_REGION from the env', function() {
        var config;
        process.env.AWS_REGION = 'us-west-2';
        config = new AWS.Config();
        return expect(config.region).toEqual('us-west-2');
      });
      it('also grabs AMAZON_REGION from the env', function() {
        var config;
        process.env.AMAZON_REGION = 'us-west-1';
        config = new AWS.Config();
        return expect(config.region).toEqual('us-west-1');
      });
      it('prefers AWS_REGION to AMAZON_REGION', function() {
        var config;
        process.env.AWS_REGION = 'us-west-2';
        process.env.AMAZON_REGION = 'us-west-1';
        config = new AWS.Config();
        return expect(config.region).toEqual('us-west-2');
      });
      return it('can be set to a string', function() {
        return expect(configure({
          region: 'us-west-1'
        }).region).toEqual('us-west-1');
      });
    });
    describe('maxRetries', function() {
      it('defaults to unefined', function() {
        return expect(configure().maxRetries).toEqual(void 0);
      });
      return it('can be set to an integer', function() {
        return expect(configure({
          maxRetries: 2
        }).maxRetries).toEqual(2);
      });
    });
    describe('paramValidation', function() {
      return it('defaults to true', function() {
        return expect(configure().paramValidation).toEqual(true);
      });
    });
    describe('computeChecksums', function() {
      return it('defaults to true', function() {
        return expect(configure().computeChecksums).toEqual(true);
      });
    });
    describe('sslEnabled', function() {
      it('defaults to true', function() {
        return expect(configure().sslEnabled).toEqual(true);
      });
      return it('can be set to false', function() {
        return expect(configure({
          sslEnabled: false
        }).sslEnabled).toEqual(false);
      });
    });
    describe('httpOptions', function() {
      return it('defaults to {}', function() {
        return expect(configure().httpOptions).toEqual({});
      });
    });
    describe('set', function() {
      it('should set a default value for a key', function() {
        var config;
        config = new AWS.Config();
        config.set('maxRetries', void 0, 'DEFAULT');
        return expect(config.maxRetries).toEqual('DEFAULT');
      });
      it('should execute default value if it is a function', function() {
        var config, mock;
        mock = jasmine.createSpy();
        config = new AWS.Config();
        config.set('maxRetries', void 0, mock);
        return expect(mock).toHaveBeenCalled();
      });
      return it('should not expand default value function if value is present', function() {
        var config, mock;
        mock = jasmine.createSpy();
        config = new AWS.Config();
        config.set('maxRetries', 'VALUE', mock);
        return expect(mock).not.toHaveBeenCalled();
      });
    });
    describe('clear', function() {
      return it('should be able to clear all key values from a config object', function() {
        var config;
        config = new AWS.Config({
          credentials: {},
          maxRetries: 300,
          sslEnabled: 'foo'
        });
        expect(config.maxRetries).toEqual(300);
        expect(config.sslEnabled).toEqual('foo');
        expect(config.credentials).not.toEqual(void 0);
        config.clear();
        expect(config.maxRetries).toEqual(void 0);
        expect(config.sslEnabled).toEqual(void 0);
        expect(config.credentials).not.toBe(void 0);
        return expect(config.credentialProvider).not.toEqual(void 0);
      });
    });
    describe('update', function() {
      it('should be able to update keyed values', function() {
        var config;
        config = new AWS.Config();
        expect(config.maxRetries).toEqual(void 0);
        config.update({
          maxRetries: 10
        });
        return expect(config.maxRetries).toEqual(10);
      });
      it('should ignore non-keyed values', function() {
        var config;
        config = new AWS.Config();
        config.update({
          foo: 10
        });
        return expect(config.foo).toEqual(void 0);
      });
      it('allows unknown keys if allowUnknownKeys is set', function() {
        var config;
        config = new AWS.Config();
        config.update({
          foo: 10
        }, true);
        return expect(config.foo).toEqual(10);
      });
      return it('should be able to update literal credentials', function() {
        var config;
        config = new AWS.Config();
        config.update({
          accessKeyId: 'akid',
          secretAccessKey: 'secret',
          sessionToken: 'session'
        });
        expect(config.credentials.accessKeyId).toEqual('akid');
        expect(config.credentials.secretAccessKey).toEqual('secret');
        return expect(config.credentials.sessionToken).toEqual('session');
      });
    });
    return describe('getCredentials', function() {
      var config, expectError, expectValid, spy;
      spy = null;
      config = null;
      beforeEach(function() {
        return spy = jasmine.createSpy('getCredentials callback');
      });
      expectValid = function(options, key) {
        if (options instanceof AWS.Config) {
          config = options;
        } else {
          config = new AWS.Config(options);
        }
        config.getCredentials(spy);
        expect(spy).toHaveBeenCalled();
        expect(spy.argsForCall[0][0]).toEqual(null);
        if (key) {
          return expect(config.credentials.accessKeyId).toEqual(key);
        }
      };
      expectError = function(options, message) {
        if (options instanceof AWS.Config) {
          config = options;
        } else {
          config = new AWS.Config(options);
        }
        config.getCredentials(spy);
        expect(spy).toHaveBeenCalled();
        expect(spy.argsForCall[0][0].code).toEqual('CredentialsError');
        return expect(spy.argsForCall[0][0].message).toEqual(message);
      };
      it('should check credentials for static object first', function() {
        return expectValid({
          credentials: {
            accessKeyId: '123',
            secretAccessKey: '456'
          }
        });
      });
      it('should error if static credentials are not available', function() {
        return expectError({
          credentials: {}
        }, 'Missing credentials');
      });
      it('should check credentials for async get() method', function() {
        return expectValid({
          credentials: {
            get: function(cb) {
              return cb();
            }
          }
        });
      });
      it('should error if credentials.get() cannot resolve', function() {
        var options;
        options = {
          credentials: {
            constructor: {
              name: 'CustomCredentials'
            },
            get: function(cb) {
              return cb(new Error('Error!'), null);
            }
          }
        };
        return expectError(options, 'Could not load credentials from CustomCredentials');
      });
      it('should check credentialProvider if no credentials', function() {
        return expectValid({
          credentials: null,
          credentialProvider: {
            resolve: function(cb) {
              return cb(null, {
                accessKeyId: 'key',
                secretAccessKey: 'secret'
              });
            }
          }
        });
      });
      it('should error if credentialProvider fails to resolve', function() {
        var options;
        options = {
          credentials: null,
          credentialProvider: {
            resolve: function(cb) {
              return cb(new Error('Error!'), null);
            }
          }
        };
        return expectError(options, 'Could not load credentials from any providers');
      });
      return it('should error if no credentials or credentialProvider', function() {
        var options;
        options = {
          credentials: null,
          credentialProvider: null
        };
        return expectError(options, 'No credentials to load');
      });
    });
  });

  describe('AWS.config', function() {
    it('should be a default Config object', function() {
      expect(AWS.config.sslEnabled).toEqual(true);
      return expect(AWS.config.maxRetries).toEqual(void 0);
    });
    return it('can set default config to an object literal', function() {
      var oldConfig;
      oldConfig = AWS.config;
      AWS.config = {};
      expect(AWS.config).toEqual({});
      return AWS.config = oldConfig;
    });
  });

}).call(this);

//# sourceMappingURL=config.spec.map
