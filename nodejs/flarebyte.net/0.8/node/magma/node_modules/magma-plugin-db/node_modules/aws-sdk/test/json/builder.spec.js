// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, helpers;

  helpers = require('../helpers');

  AWS = helpers.AWS;

  describe('AWS.JSON.Builder', function() {
    var timestampFormat, toJSON;
    timestampFormat = 'iso8601';
    toJSON = function(rules, params, options) {
      var builder;
      if (!options) {
        options = {};
      }
      options.timestampFormat = timestampFormat;
      builder = new AWS.JSON.Builder(rules, options);
      return builder.toJSON(params);
    };
    return describe('toJSON', function() {
      it('returns an empty document when there are no params', function() {
        return expect(toJSON({}, {})).toEqual("{}");
      });
      it('translates strucutres', function() {
        var params, rules;
        rules = {
          type: 'structure',
          members: {
            Items: {
              type: 'structure',
              members: {
                A: {
                  type: 'string'
                },
                B: {
                  type: 'string'
                }
              }
            }
          }
        };
        params = {
          Items: {
            A: 'a',
            B: 'b'
          }
        };
        return expect(toJSON(rules, params)).toEqual('{"Items":{"A":"a","B":"b"}}');
      });
      it('translates lists', function() {
        var params, rules;
        rules = {
          type: 'structure',
          members: {
            Items: {
              type: 'list',
              members: {
                type: 'string'
              }
            }
          }
        };
        params = {
          Items: ['a', 'b', 'c']
        };
        return expect(toJSON(rules, params)).toEqual('{"Items":["a","b","c"]}');
      });
      it('translates maps', function() {
        var params, rules;
        rules = {
          type: 'structure',
          members: {
            Items: {
              type: 'map'
            }
          }
        };
        params = {
          Items: {
            A: 'a',
            B: 'b'
          }
        };
        return expect(toJSON(rules, params)).toEqual('{"Items":{"A":"a","B":"b"}}');
      });
      return it('traslates nested timestamps', function() {
        var formatted, now, params, rules;
        rules = {
          type: 'structure',
          members: {
            Build: {
              type: 'timestamp'
            }
          }
        };
        now = new Date();
        params = {
          Build: {
            When: now
          }
        };
        formatted = AWS.util.date.iso8601(now);
        return expect(toJSON(rules, params)).toEqual('{"Build":{"When":"' + formatted + '"}}');
      });
    });
  });

}).call(this);

//# sourceMappingURL=builder.spec.map
