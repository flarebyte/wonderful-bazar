// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, helpers, http, url;

  helpers = require('./helpers');

  url = require('url');

  http = require('http');

  AWS = helpers.AWS;

  describe('AWS.MetadataService', function() {
    return describe('loadCredentials', function() {
      var port, server, service, _ref;
      _ref = [null, 1024 + parseInt(Math.random() * 100), null], server = _ref[0], port = _ref[1], service = _ref[2];
      beforeEach(function() {
        service = new AWS.MetadataService({
          host: '127.0.0.1:' + port
        });
        server = http.createServer(function(req, res) {
          var data, match, re;
          re = new RegExp('^/latest/meta-data/iam/security-credentials/(.*)$');
          match = url.parse(req.url).pathname.match(re);
          if (match) {
            res.writeHead(200, {
              'Content-Type': 'text/plain'
            });
            if (match[1] === '') {
              res.write('TestingRole\n');
              res.write('TestingRole2\n');
            } else {
              data = '{"Code":"Success","AccessKeyId":"KEY","SecretAccessKey":"SECRET","Token":"TOKEN"}';
              res.write(data);
            }
          } else {
            res.writeHead(404, {});
          }
          return res.end();
        });
        return server.listen(port);
      });
      afterEach(function() {
        if (server) {
          return server.close();
        }
      });
      it('should load credentials from metadata service', function() {
        var data, err, _ref1;
        _ref1 = [null, null], err = _ref1[0], data = _ref1[1];
        runs(function() {
          return service.loadCredentials(function(e, d) {
            var _ref2;
            return _ref2 = [e, d], err = _ref2[0], data = _ref2[1], _ref2;
          });
        });
        waitsFor(function() {
          return err || data;
        });
        return runs(function() {
          expect(err).toBe(null);
          expect(data.Code).toEqual('Success');
          expect(data.AccessKeyId).toEqual('KEY');
          expect(data.SecretAccessKey).toEqual('SECRET');
          return expect(data.Token).toEqual('TOKEN');
        });
      });
      return it('should fail if server is not up', function() {
        var data, err, _ref1;
        server.close();
        server = null;
        service = new AWS.MetadataService({
          host: '255.255.255.255'
        });
        service.httpOptions.timeout = 10;
        _ref1 = [null, null], err = _ref1[0], data = _ref1[1];
        runs(function() {
          return service.loadCredentials(function(e, d) {
            var _ref2;
            return _ref2 = [e, d], err = _ref2[0], data = _ref2[1], _ref2;
          });
        });
        waitsFor(function() {
          return err || data;
        });
        return runs(function() {
          expect(err instanceof Error).toBe(true);
          return expect(data).toEqual(null);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=metadata_service.spec.map
