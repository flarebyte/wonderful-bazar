// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, helpers;

  helpers = require('./helpers');

  AWS = helpers.AWS;

  describe('AWS.ParamValidator', function() {
    var expectError, expectValid, members, rules, validate, _ref;
    _ref = [{}, {}], members = _ref[0], rules = _ref[1];
    validate = function(params) {
      var r;
      r = rules;
      if (r && !r.xml && !r.payload) {
        r = {
          type: 'structure',
          members: rules
        };
      }
      return new AWS.ParamValidator().validate(r, params);
    };
    expectValid = function(params) {
      return expect(validate(params)).toEqual(true);
    };
    expectError = function(message, params) {
      var _ref1;
      if (params === void 0) {
        _ref1 = [void 0, message], message = _ref1[0], params = _ref1[1];
      }
      return expect(function() {
        return validate(params);
      }).toThrow(message);
    };
    describe('empty rules', function() {
      beforeEach(function() {
        return rules = {};
      });
      it('accepts an empty hash when the rules are nil', function() {
        rules = null;
        return expectValid({});
      });
      it('accepts an empty hash when the rules are an empty hash', function() {
        return expectValid({});
      });
      return it('does not accept params in the given hash', function() {
        return expectError({
          foo: 'bar'
        });
      });
    });
    describe('param keys', function() {
      beforeEach(function() {
        return rules = {
          foo: {},
          bar: {
            type: 'string'
          }
        };
      });
      it('accepts string keys', function() {
        expectValid({
          foo: 'foo'
        });
        return expectValid({
          bar: 'bar'
        });
      });
      return it('rejects keys that do not match case', function() {
        expectError({
          Bar: 'bar'
        });
        return expectError({
          Foo: 'foo'
        });
      });
    });
    describe('unexpected params', function() {
      beforeEach(function() {
        return rules = {
          string1: {},
          string2: {},
          hash: {
            type: 'structure',
            members: {
              good: {}
            }
          }
        };
      });
      it('throws an ArgumentError for un-described params', function() {
        return expectError({
          string3: 'xyz'
        });
      });
      return it('rejects nested params that are not described in the rules', function() {
        expectValid({
          hash: {
            good: 'abc'
          }
        });
        return expectError({
          hash: {
            bad: 'abc'
          }
        });
      });
    });
    describe('required params', function() {
      beforeEach(function() {
        return rules = {
          req: {
            required: true
          },
          opt: {
            type: 'structure',
            members: {
              req: {
                required: true
              }
            }
          }
        };
      });
      it('throws an error if a top-level required param is omitted', function() {
        return expectError({});
      });
      it('optional params can be omitted, even if they have required params', function() {
        return expectValid({
          req: 'abc'
        });
      });
      it('requires nested required params when the parent is present', function() {
        return expectError({
          req: 'abc',
          opt: {}
        });
      });
      it('accepts nested required params', function() {
        return expectValid({
          req: 'abc',
          opt: {
            req: 'xyz'
          }
        });
      });
      it('accepts empty strings in required params', function() {
        return expectValid({
          req: ''
        });
      });
      it('accepts 0 in required params', function() {
        rules.req.type = 'integer';
        return expectValid({
          req: 0
        });
      });
      return it('accepts false in required params', function() {
        rules.req.type = 'boolean';
        return expectValid({
          req: false
        });
      });
    });
    describe('structure', function() {
      beforeEach(function() {
        return rules = {
          hash1: {
            type: 'structure',
            members: {
              param1: {},
              param2: {},
              hash2: {
                type: 'structure',
                members: {
                  param3: {
                    type: 'boolean'
                  },
                  param4: {
                    type: 'integer',
                    required: true
                  }
                }
              }
            }
          }
        };
      });
      it('accepts hashes', function() {
        return expectValid({
          hash1: {}
        });
      });
      it('accepts hashes with params', function() {
        return expectValid({
          hash1: {
            param1: 'a',
            param2: 'b'
          }
        });
      });
      it('throws an error for non hashes', function() {
        return expectError({
          hash1: 'oops'
        });
      });
      it('throws an error for unknown hash members', function() {
        return expectError({
          hash1: {
            param3: 'c'
          }
        });
      });
      it('allows nesting structures', function() {
        return expectValid({
          hash1: {
            hash2: {
              param3: true,
              param4: 123
            }
          }
        });
      });
      return it('rejects unknown members', function() {
        return expectError({
          hash1: {
            oops: 'abc'
          }
        });
      });
    });
    describe('list', function() {
      beforeEach(function() {
        members = {};
        return rules = {
          array: {
            type: 'list',
            members: members
          }
        };
      });
      it('accepts an array for list params', function() {
        return expectValid({
          array: []
        });
      });
      it('throws an error if list params are not arrays', function() {
        return expectError({
          array: {}
        });
      });
      return it('supports nested structures', function() {
        members.type = 'structure';
        members.members = {
          name: {}
        };
        expectValid({
          array: [
            {
              name: 'abc'
            }, {
              name: 'mno'
            }, {
              name: 'xyz'
            }
          ]
        });
        return expectError({
          array: [
            {
              badKey: 'abc'
            }
          ]
        });
      });
    });
    describe('map', function() {
      beforeEach(function() {
        members = {};
        return rules = {
          hash: {
            type: 'map',
            members: members
          }
        };
      });
      it('accepts maps', function() {
        return expectValid({
          hash: {}
        });
      });
      it('rejects non-maps', function() {
        return expectError({
          hash: 'oops'
        });
      });
      it('accepts user-supplied maps keys', function() {
        return expectValid({
          hash: {
            a: '1',
            b: '2',
            c: '3'
          }
        });
      });
      return it('supports nested params', function() {
        members.type = 'structure';
        members.members = {
          param1: {
            type: 'list'
          },
          param2: {
            type: 'integer'
          },
          param3: {
            type: 'structure',
            members: {
              param4: {}
            }
          }
        };
        expectValid({
          hash: {
            foo: {
              param1: ['a', 'b', 'c']
            },
            bar: {
              param2: 123
            },
            yuck: {
              param3: {
                param4: 'xyz'
              }
            }
          }
        });
        return expectError({
          hash: {
            foo: {
              param4: 'abc'
            }
          }
        });
      });
    });
    describe('boolean', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'boolean'
          }
        };
      });
      it('accepts true', function() {
        return expectValid({
          param: true
        });
      });
      it('accpets false', function() {
        return expectValid({
          param: false
        });
      });
      return it('rejects other values', function() {
        return expectError({
          param: 'true'
        });
      });
    });
    describe('timestamp', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'timestamp'
          }
        };
      });
      it('accepts Date objects', function() {
        return expectValid({
          param: new Date()
        });
      });
      it('accepts strings formatted like datetimes', function() {
        expectValid({
          param: '2012-01-02T10:11:12Z'
        });
        return expectValid({
          param: '2012-01-02T10:11:12.0001Z'
        });
      });
      it('accepts UNIX timestamps as number values', function() {
        return expectValid({
          param: 12345
        });
      });
      return it('rejects other param values', function() {
        return expectError({
          param: 'abc'
        });
      });
    });
    describe('string', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'string'
          }
        };
      });
      it('accepts strings', function() {
        return expectValid({
          param: 'abc'
        });
      });
      it('accepts empty string', function() {
        return expectValid({
          param: ''
        });
      });
      return it('rejects other objects', function() {
        expectError({
          param: 123
        });
        expectError({
          param: {}
        });
        return expectError({
          param: []
        });
      });
    });
    describe('float', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'float'
          }
        };
      });
      it('accepts floats', function() {
        return expectValid({
          param: 1.23
        });
      });
      it('accepts integers', function() {
        return expectValid({
          param: 123
        });
      });
      return it('rejects other objects', function() {
        return expectError({
          param: '123'
        });
      });
    });
    describe('integer', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'integer'
          }
        };
      });
      it('accepts integers', function() {
        return expectValid({
          param: 123
        });
      });
      return it('rejects other objects', function() {
        return expectError({
          param: '123'
        });
      });
    });
    describe('binary', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'base64'
          }
        };
      });
      it('accepts strings', function() {
        return expectValid({
          param: 'abc'
        });
      });
      it('accepts Buffers', function() {
        return expectValid({
          param: new Buffer(100)
        });
      });
      return it('rejects other objects', function() {
        return expectError({
          param: {}
        });
      });
    });
    describe('binary', function() {
      beforeEach(function() {
        return rules = {
          param: {
            type: 'binary'
          }
        };
      });
      it('accepts strings', function() {
        return expectValid({
          param: 'abc'
        });
      });
      it('accepts Buffers', function() {
        return expectValid({
          param: new Buffer(100)
        });
      });
      it('accepts Streams', function() {
        var Stream;
        Stream = require('stream').Stream;
        return expectValid({
          param: new Stream()
        });
      });
      return it('rejects other objects', function() {
        return expectError({
          param: {}
        });
      });
    });
    describe('payloads', function() {
      return it('validates from payload key if rules include an xml element', function() {
        rules = {
          xml: 'body',
          type: 'structure',
          members: {
            notbody: {
              type: 'string'
            },
            body: {
              required: true,
              type: 'structure',
              members: {
                enabled: {
                  type: 'boolean'
                }
              }
            }
          }
        };
        return expectValid({
          enabled: true,
          notbody: 'true'
        });
      });
    });
    return describe('error messages', function() {
      beforeEach(function() {
        return rules = {
          config: {
            type: 'structure',
            members: {
              settings: {
                type: 'structure',
                members: {
                  enabled: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        };
      });
      it('throws helpful messages for unknown params', function() {
        var msg;
        msg = 'Unexpected key \'fake\' found in params';
        return expectError(msg, {
          fake: 'value'
        });
      });
      it('throws helpful messages for nested unknown params', function() {
        var msg;
        msg = 'Unexpected key \'fake\' found in params.config.settings';
        return expectError(msg, {
          config: {
            settings: {
              fake: 'value'
            }
          }
        });
      });
      it('throws helpful messages for missing required params', function() {
        var msg;
        msg = 'Missing required key \'needed\' in params.config.settings';
        rules.config.members.settings.members.needed = {
          required: true
        };
        return expectError(msg, {
          config: {
            settings: {}
          }
        });
      });
      it('throws helpul messages for invalid structures', function() {
        var msg;
        msg = 'Expected params.config.settings to be a structure';
        return expectError(msg, {
          config: {
            settings: 'abc'
          }
        });
      });
      it('throws helpul messages for invalid lists', function() {
        var msg;
        msg = 'Expected params.config.settings.tags to be an Array';
        rules.config.members.settings.members.tags = {
          type: 'list',
          members: {}
        };
        return expectError(msg, {
          config: {
            settings: {
              tags: 123
            }
          }
        });
      });
      it('throws helpful messages for invalid list members', function() {
        var msg;
        msg = 'Expected params.config.items[1].value to be a number';
        rules['config']['members']['items'] = {
          type: 'list',
          members: {
            type: 'structure',
            members: {
              value: {
                type: 'integer'
              }
            }
          }
        };
        return expectError(msg, {
          config: {
            items: [
              {
                value: 123
              }, {
                value: 'abc'
              }, {
                value: 321
              }
            ]
          }
        });
      });
      it('throws helpful messages for invalid maps', function() {
        var msg;
        msg = 'Expected params.config.settings.tags to be a map';
        rules['config']['members']['settings']['members']['tags'] = {
          type: 'map',
          members: {}
        };
        return expectError(msg, {
          config: {
            settings: {
              tags: '123'
            }
          }
        });
      });
      it('throws helpful messages for invalid map members', function() {
        var msg;
        msg = 'Expected params.config.counts[\'red\'] to be a number';
        rules['config']['members']['counts'] = {
          type: 'map',
          members: {
            type: 'integer'
          }
        };
        return expectError(msg, {
          config: {
            counts: {
              red: true
            }
          }
        });
      });
      it('throws helpful messages for invalid strings', function() {
        var msg;
        msg = "Expected params.config.settings.name to be a string";
        rules['config']['members']['settings']['members']['name'] = {
          type: 'string'
        };
        return expectError(msg, {
          config: {
            settings: {
              name: null
            }
          }
        });
      });
      it('throws helpful messages for invalid integers', function() {
        var msg;
        msg = "Expected params.config.settings.count to be a number";
        rules['config']['members']['settings']['members']['count'] = {
          type: 'integer'
        };
        return expectError(msg, {
          config: {
            settings: {
              count: null
            }
          }
        });
      });
      it('throws helpful messages for invalid timestamps', function() {
        var msg;
        msg = "Expected params.config.settings.when to be a " + "Date object, ISO-8601 string, or a UNIX timestamp";
        rules['config']['members']['settings']['members']['when'] = {
          type: 'timestamp'
        };
        return expectError(msg, {
          config: {
            settings: {
              when: null
            }
          }
        });
      });
      it('throws helpful messages for invalid booleans', function() {
        var msg;
        msg = "Expected params.config.settings.enabled to be a boolean";
        return expectError(msg, {
          config: {
            settings: {
              enabled: null
            }
          }
        });
      });
      it('throws helpful messages for invalid floats', function() {
        var msg;
        msg = "Expected params.config.settings.value to be a number";
        rules.config.members.settings.members.value = {
          type: 'float'
        };
        return expectError(msg, {
          config: {
            settings: {
              value: null
            }
          }
        });
      });
      it('throws helpful messages for invalid base64 params', function() {
        var msg;
        msg = "Expected params.config.settings.data to be a " + "string, Buffer, or Stream";
        rules.config.members.settings.members.data = {
          type: 'base64'
        };
        return expectError(msg, {
          config: {
            settings: {
              data: null
            }
          }
        });
      });
      return it('throws helpful messages for invalid binary params', function() {
        var msg;
        msg = "Expected params.config.settings.data to be a " + "string, Buffer, or Stream";
        rules.config.members.settings.members.data = {
          type: 'binary'
        };
        return expectError(msg, {
          config: {
            settings: {
              data: null
            }
          }
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=param_validator.spec.map
