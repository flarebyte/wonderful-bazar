// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, helpers;

  AWS = require('../../lib/core');

  helpers = require('../helpers');

  require('../../lib/services/ec2');

  describe('AWS.EC2', function() {
    var ec2;
    ec2 = new AWS.EC2();
    describe('proxy support', function() {
      return it('always sets Host header to correct endpoint', function() {
        ec2 = new AWS.EC2({
          httpOptions: {
            proxy: 'http://__INVALID_HOSTNAME__:9999'
          }
        });
        return ec2.makeRequest('describeInstances', function() {
          return expect(this.request.httpRequest.headers.Host).toEqual('ec2.mock-region.amazonaws.com');
        });
      });
    });
    return describe('parseResponse', function() {
      var body, parse;
      body = '';
      parse = function(callback) {
        helpers.mockHttpResponse(400, {}, body);
        return ec2.makeRequest('describeInstances', function(error, data) {
          return callback.call(this, error, data);
        });
      };
      return describe('with error', function() {
        beforeEach(function() {
          return body = "<Response>\n  <Errors>\n    <Error>\n      <Code>InvalidInstanceID.Malformed</Code>\n      <Message>Invalid id: \"i-12345678\"</Message>\n    </Error>\n  </Errors>\n  <RequestID>ab123mno-6432-dceb-asdf-123mno543123</RequestID>\n</Response>";
        });
        it('extracts the error code', function() {
          return parse(function(error, data) {
            expect(error.code).toEqual('InvalidInstanceID.Malformed');
            return expect(data).toEqual(null);
          });
        });
        it('extracts the error message', function() {
          return parse(function(error, data) {
            expect(error.message).toEqual('Invalid id: "i-12345678"');
            return expect(data).toEqual(null);
          });
        });
        return it('returns an empty error when the body is blank', function() {
          body = '';
          return parse(function(error, data) {
            expect(error.code).toEqual(400);
            expect(error.message).toEqual(null);
            return expect(data).toEqual(null);
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=ec2.spec.map
