// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, Stream, helpers;

  helpers = require('../helpers');

  AWS = helpers.AWS;

  Stream = require('stream').Stream;

  require('../../lib/services/s3');

  describe('AWS.S3', function() {
    var oldRegion, request, s3;
    s3 = null;
    oldRegion = null;
    request = function(operation, params) {
      var req;
      req = new AWS.Request(s3, operation, params || {});
      req.service.addAllRequestListeners(req);
      return req;
    };
    beforeEach(function() {
      oldRegion = AWS.config.region;
      AWS.config.update({
        region: void 0
      });
      return s3 = new AWS.S3();
    });
    afterEach(function() {
      return AWS.config.update({
        region: oldRegion
      });
    });
    describe('dnsCompatibleBucketName', function() {
      it('must be at least 3 characters', function() {
        return expect(s3.dnsCompatibleBucketName('aa')).toBe(false);
      });
      it('must not be longer than 63 characters', function() {
        var b;
        b = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';
        return expect(s3.dnsCompatibleBucketName(b)).toBe(false);
      });
      it('must start with a lower-cased letter or number', function() {
        expect(s3.dnsCompatibleBucketName('Abc')).toBe(false);
        expect(s3.dnsCompatibleBucketName('-bc')).toBe(false);
        return expect(s3.dnsCompatibleBucketName('abc')).toBe(true);
      });
      it('must end with a lower-cased letter or number', function() {
        expect(s3.dnsCompatibleBucketName('abC')).toBe(false);
        expect(s3.dnsCompatibleBucketName('ab-')).toBe(false);
        return expect(s3.dnsCompatibleBucketName('abc')).toBe(true);
      });
      it('may not contain multiple contiguous dots', function() {
        expect(s3.dnsCompatibleBucketName('abc.123')).toBe(true);
        return expect(s3.dnsCompatibleBucketName('abc..123')).toBe(false);
      });
      it('may only contain letters numbers and dots', function() {
        expect(s3.dnsCompatibleBucketName('abc123')).toBe(true);
        return expect(s3.dnsCompatibleBucketName('abc_123')).toBe(false);
      });
      return it('must not look like an ip address', function() {
        expect(s3.dnsCompatibleBucketName('1.2.3.4')).toBe(false);
        return expect(s3.dnsCompatibleBucketName('a.b.c.d')).toBe(true);
      });
    });
    describe('endpoint', function() {
      it('sets hostname to s3.amazonaws.com when region is un-specified', function() {
        s3 = new AWS.S3();
        return expect(s3.endpoint.hostname).toEqual('s3.amazonaws.com');
      });
      it('sets hostname to s3.amazonaws.com when region is us-east-1', function() {
        s3 = new AWS.S3({
          region: 'us-east-1'
        });
        return expect(s3.endpoint.hostname).toEqual('s3.amazonaws.com');
      });
      it('sets region to us-east-1 when unspecified', function() {
        s3 = new AWS.S3({
          region: 'us-east-1'
        });
        return expect(s3.config.region).toEqual('us-east-1');
      });
      return it('combines the region with s3 in the endpoint using a - instead of .', function() {
        s3 = new AWS.S3({
          region: 'us-west-1'
        });
        return expect(s3.endpoint.hostname).toEqual('s3-us-west-1.amazonaws.com');
      });
    });
    describe('building a request', function() {
      var build;
      build = function(operation, params) {
        var req;
        req = request(operation, params);
        req.emit('build', [req]);
        return req.httpRequest;
      };
      it('obeys the configuration for s3ForcePathStyle', function() {
        var config, req;
        config = new AWS.Config({
          s3ForcePathStyle: true
        });
        s3 = new AWS.S3(config);
        expect(s3.config.s3ForcePathStyle).toEqual(true);
        req = build('headObject', {
          Bucket: 'bucket',
          Key: 'key'
        });
        expect(req.endpoint.hostname).toEqual('s3.amazonaws.com');
        return expect(req.path).toEqual('/bucket/key');
      });
      describe('uri escaped params', function() {
        it('uri-escapes path and querystring params', function() {
          var params, req;
          params = {
            Bucket: 'bucket',
            Key: 'a b c',
            VersionId: 'a&b'
          };
          req = build('headObject', params);
          return expect(req.path).toEqual('/a%20b%20c?versionId=a%26b');
        });
        it('does not uri-escape forward slashes in the path', function() {
          var params, req;
          params = {
            Bucket: 'bucket',
            Key: 'k e/y'
          };
          req = build('headObject', params);
          return expect(req.path).toEqual('/k%20e/y');
        });
        it('ensures a single forward slash exists', function() {
          var req;
          req = build('listObjects', {
            Bucket: 'bucket'
          });
          expect(req.path).toEqual('/');
          req = build('listObjects', {
            Bucket: 'bucket',
            MaxKeys: 123
          });
          return expect(req.path).toEqual('/?max-keys=123');
        });
        return it('ensures a single forward slash exists when querystring is present');
      });
      return describe('virtual-hosted vs path-style bucket requests', function() {
        describe('HTTPS', function() {
          beforeEach(function() {
            return s3 = new AWS.S3({
              sslEnabled: true
            });
          });
          it('puts dns-compat bucket names in the hostname', function() {
            var req;
            req = build('headObject', {
              Bucket: 'bucket-name',
              Key: 'abc'
            });
            expect(req.method).toEqual('HEAD');
            expect(req.endpoint.hostname).toEqual('bucket-name.s3.amazonaws.com');
            return expect(req.path).toEqual('/abc');
          });
          it('ensures the path contains / at a minimum when moving bucket', function() {
            var req;
            req = build('listObjects', {
              Bucket: 'bucket-name'
            });
            expect(req.endpoint.hostname).toEqual('bucket-name.s3.amazonaws.com');
            return expect(req.path).toEqual('/');
          });
          it('puts dns-compat bucket names in path if they contain a dot', function() {
            var req;
            req = build('listObjects', {
              Bucket: 'bucket.name'
            });
            expect(req.endpoint.hostname).toEqual('s3.amazonaws.com');
            return expect(req.path).toEqual('/bucket.name');
          });
          it('puts dns-compat bucket names in path if configured to do so', function() {
            var req;
            s3 = new AWS.S3({
              sslEnabled: true,
              s3ForcePathStyle: true
            });
            req = build('listObjects', {
              Bucket: 'bucket-name'
            });
            expect(req.endpoint.hostname).toEqual('s3.amazonaws.com');
            return expect(req.path).toEqual('/bucket-name');
          });
          return it('puts dns-incompat bucket names in path', function() {
            var req;
            req = build('listObjects', {
              Bucket: 'bucket_name'
            });
            expect(req.endpoint.hostname).toEqual('s3.amazonaws.com');
            return expect(req.path).toEqual('/bucket_name');
          });
        });
        return describe('HTTP', function() {
          beforeEach(function() {
            return s3 = new AWS.S3({
              sslEnabled: false
            });
          });
          it('puts dns-compat bucket names in the hostname', function() {
            var req;
            req = build('listObjects', {
              Bucket: 'bucket-name'
            });
            expect(req.endpoint.hostname).toEqual('bucket-name.s3.amazonaws.com');
            return expect(req.path).toEqual('/');
          });
          it('puts dns-compat bucket names in the hostname if they contain a dot', function() {
            var req;
            req = build('listObjects', {
              Bucket: 'bucket.name'
            });
            expect(req.endpoint.hostname).toEqual('bucket.name.s3.amazonaws.com');
            return expect(req.path).toEqual('/');
          });
          return it('puts dns-incompat bucket names in path', function() {
            var req;
            req = build('listObjects', {
              Bucket: 'bucket_name'
            });
            expect(req.endpoint.hostname).toEqual('s3.amazonaws.com');
            return expect(req.path).toEqual('/bucket_name');
          });
        });
      });
    });
    describe('errors with no XML body', function() {
      var extractError;
      extractError = function(statusCode, body) {
        var req, resp;
        req = request('operation');
        resp = new AWS.Response(req);
        resp.httpResponse.body = new Buffer(body || '');
        resp.httpResponse.statusCode = statusCode;
        req.emit('extractError', [resp]);
        return resp.error;
      };
      it('handles 304 errors', function() {
        var error;
        error = extractError(304);
        expect(error.code).toEqual('NotModified');
        return expect(error.message).toEqual(null);
      });
      it('handles 400 errors', function() {
        var error;
        error = extractError(400);
        expect(error.code).toEqual('BadRequest');
        return expect(error.message).toEqual(null);
      });
      it('handles 403 errors', function() {
        var error;
        error = extractError(403);
        expect(error.code).toEqual('Forbidden');
        return expect(error.message).toEqual(null);
      });
      it('handles 404 errors', function() {
        var error;
        error = extractError(404);
        expect(error.code).toEqual('NotFound');
        return expect(error.message).toEqual(null);
      });
      it('misc errors not known to return an empty body', function() {
        var error;
        error = extractError(412);
        expect(error.code).toEqual(412);
        return expect(error.message).toEqual(null);
      });
      return it('uses canned errors only when the body is empty', function() {
        var body, error;
        body = "<xml>\n  <Code>ErrorCode</Code>\n  <Message>ErrorMessage</Message>\n</xml>";
        error = extractError(403, body);
        expect(error.code).toEqual('ErrorCode');
        return expect(error.message).toEqual('ErrorMessage');
      });
    });
    describe('getBucketAcl', function() {
      return it('correctly parses the ACL XML document', function() {
        var body, headers;
        headers = {
          'x-amz-request-id': 'request-id'
        };
        body = "<AccessControlPolicy xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <AccessControlList>\n    <Grant>\n      <Grantee xsi:type=\"CanonicalUser\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <DisplayName>aws-ruby-sdk</DisplayName>\n        <ID>id</ID>\n      </Grantee>\n      <Permission>FULL_CONTROL</Permission>\n    </Grant>\n    <Grant>\n      <Grantee xsi:type=\"Group\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <URI>uri</URI>\n      </Grantee>\n      <Permission>READ</Permission>\n    </Grant>\n  </AccessControlList>\n  <Owner>\n    <DisplayName>aws-ruby-sdk</DisplayName>\n    <ID>id</ID>\n  </Owner>\n</AccessControlPolicy>";
        helpers.mockHttpResponse(200, headers, body);
        return s3.getBucketAcl(function(error, data) {
          expect(error).toBe(null);
          return expect(data).toEqual({
            Owner: {
              DisplayName: 'aws-ruby-sdk',
              ID: 'id'
            },
            Grants: [
              {
                Permission: 'FULL_CONTROL',
                Grantee: {
                  Type: 'CanonicalUser',
                  DisplayName: 'aws-ruby-sdk',
                  ID: 'id'
                }
              }, {
                Permission: 'READ',
                Grantee: {
                  Type: 'Group',
                  URI: 'uri'
                }
              }
            ],
            RequestId: 'request-id'
          });
        });
      });
    });
    describe('putBucketAcl', function() {
      return it('correctly builds the ACL XML document', function() {
        var params, xml;
        xml = "<AccessControlPolicy xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <AccessControlList>\n    <Grant>\n      <Grantee xsi:type=\"CanonicalUser\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <DisplayName>aws-ruby-sdk</DisplayName>\n        <ID>id</ID>\n      </Grantee>\n      <Permission>FULL_CONTROL</Permission>\n    </Grant>\n    <Grant>\n      <Grantee xsi:type=\"Group\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <URI>uri</URI>\n      </Grantee>\n      <Permission>READ</Permission>\n    </Grant>\n  </AccessControlList>\n  <Owner>\n    <DisplayName>aws-ruby-sdk</DisplayName>\n    <ID>id</ID>\n  </Owner>\n</AccessControlPolicy>";
        helpers.mockHttpResponse(200, {}, '');
        params = {
          AccessControlPolicy: {
            Owner: {
              DisplayName: 'aws-ruby-sdk',
              ID: 'id'
            },
            Grants: [
              {
                Permission: 'FULL_CONTROL',
                Grantee: {
                  Type: 'CanonicalUser',
                  DisplayName: 'aws-ruby-sdk',
                  ID: 'id'
                }
              }, {
                Permission: 'READ',
                Grantee: {
                  Type: 'Group',
                  URI: 'uri'
                }
              }
            ]
          }
        };
        return s3.putBucketAcl(params, function(err, data) {
          return helpers.matchXML(this.request.httpRequest.body, xml);
        });
      });
    });
    describe('completeMultipartUpload', function() {
      it('returns data when the resp is 200 with valid response', function() {
        var body, headers;
        headers = {
          'x-amz-id-2': 'Uuag1LuByRx9e6j5Onimru9pO4ZVKnJ2Qz7/C1NPcfTWAtRPfTaOFg==',
          'x-amz-request-id': '656c76696e6727732072657175657374'
        };
        body = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CompleteMultipartUploadResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Location>http://Example-Bucket.s3.amazonaws.com/Example-Object</Location>\n  <Bucket>Example-Bucket</Bucket>\n  <Key>Example-Object</Key>\n  <ETag>\"3858f62230ac3c915f300c664312c11f-9\"</ETag>\n</CompleteMultipartUploadResult>";
        helpers.mockHttpResponse(200, headers, body);
        return s3.completeMultipartUpload(function(error, data) {
          expect(error).toBe(null);
          return expect(data).toEqual({
            Location: 'http://Example-Bucket.s3.amazonaws.com/Example-Object',
            Bucket: 'Example-Bucket',
            Key: 'Example-Object',
            ETag: '"3858f62230ac3c915f300c664312c11f-9"',
            RequestId: '656c76696e6727732072657175657374'
          });
        });
      });
      return it('returns an error when the resp is 200 with an error xml document', function() {
        var body;
        body = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>InternalError</Code>\n  <Message>We encountered an internal error. Please try again.</Message>\n  <RequestId>656c76696e6727732072657175657374</RequestId>\n  <HostId>Uuag1LuByRx9e6j5Onimru9pO4ZVKnJ2Qz7/C1NPcfTWAtRPfTaOFg==</HostId>\n</Error>";
        helpers.mockHttpResponse(200, {}, body);
        return s3.completeMultipartUpload(function(error, data) {
          expect(error instanceof Error).toBeTruthy();
          expect(error.code).toEqual('InternalError');
          expect(error.message).toEqual('We encountered an internal error. Please try again.');
          expect(error.statusCode).toEqual(200);
          expect(error.retryable).toEqual(true);
          return expect(data).toEqual(null);
        });
      });
    });
    describe('getBucketLocation', function() {
      it('returns null for the location constraint when not present', function() {
        var body;
        body = '<?xml version="1.0" encoding="UTF-8"?>\n<LocationConstraint xmlns="http://s3.amazonaws.com/doc/2006-03-01/"/>';
        helpers.mockHttpResponse(200, {}, body);
        return s3.getBucketLocation(function(error, data) {
          expect(error).toBe(null);
          return expect(data).toEqual({});
        });
      });
      return it('parses the location constraint from the root xml', function() {
        var body, headers;
        headers = {
          'x-amz-request-id': 'abcxyz'
        };
        body = '<?xml version="1.0" encoding="UTF-8"?>\n<LocationConstraint xmlns="http://s3.amazonaws.com/doc/2006-03-01/">EU</LocationConstraint>';
        helpers.mockHttpResponse(200, headers, body);
        return s3.getBucketLocation(function(error, data) {
          expect(error).toBe(null);
          return expect(data).toEqual({
            LocationConstraint: 'EU',
            RequestId: 'abcxyz'
          });
        });
      });
    });
    describe('createBucket', function() {
      it('auto-populates the LocationConstraint based on the region', function() {
        var loc;
        loc = null;
        s3 = new AWS.S3({
          region: 'eu-west-1'
        });
        s3.makeRequest = function(op, params) {
          return loc = params.CreateBucketConfiguration.LocationConstraint;
        };
        s3.createBucket({
          Bucket: 'name'
        });
        return expect(loc).toEqual('eu-west-1');
      });
      return it('correctly builds the xml', function() {});
    });
    AWS.util.each(AWS.S3.prototype.computableChecksumOperations, function(operation) {
      return describe(operation, function() {
        return it('forces Content-MD5 header parameter', function() {
          var hash, resp;
          helpers.mockHttpResponse(200, {}, '');
          resp = s3[operation]({
            Bucket: 'bucket',
            ContentMD5: '000'
          }).send();
          hash = AWS.util.crypto.md5(resp.request.httpRequest.body, 'base64');
          return expect(resp.request.httpRequest.headers['Content-MD5']).toEqual(hash);
        });
      });
    });
    describe('willComputeChecksums', function() {
      var willCompute;
      beforeEach(function() {
        return helpers.mockHttpResponse(200, {}, '');
      });
      willCompute = function(operation, opts) {
        var checksum, compute, realChecksum, resp;
        compute = opts.computeChecksums;
        s3 = new AWS.S3({
          computeChecksums: compute
        });
        resp = s3.makeRequest(operation, {
          Bucket: 'example',
          ContentMD5: opts.hash
        }).send();
        checksum = resp.request.httpRequest.headers['Content-MD5'];
        if (opts.hash !== void 0) {
          return expect(checksum).toEqual(opts.hash);
        } else {
          realChecksum = AWS.util.crypto.md5(resp.request.httpRequest.body, 'base64');
          return expect(checksum).toEqual(realChecksum);
        }
      };
      it('computes checksums if the operation requires it', function() {
        willCompute('deleteObjects', {
          computeChecksums: true
        });
        willCompute('putBucketCors', {
          computeChecksums: true
        });
        willCompute('putBucketLifecycle', {
          computeChecksums: true
        });
        return willCompute('putBucketTagging', {
          computeChecksums: true
        });
      });
      it('computes checksums if computeChecksums is off and operation requires it', function() {
        willCompute('deleteObjects', {
          computeChecksums: false
        });
        willCompute('putBucketCors', {
          computeChecksums: false
        });
        willCompute('putBucketLifecycle', {
          computeChecksums: false
        });
        return willCompute('putBucketTagging', {
          computeChecksums: false
        });
      });
      it('does not compute checksums if computeChecksums is off', function() {
        return willCompute('putObject', {
          computeChecksums: false,
          hash: null
        });
      });
      it('does not compute checksums if computeChecksums is on and ContentMD5 is provided', function() {
        return willCompute('putBucketAcl', {
          computeChecksums: true,
          hash: '000'
        });
      });
      it('does not compute checksums for Stream objects', function() {
        var resp;
        s3 = new AWS.S3({
          computeChecksums: true
        });
        resp = s3.putObject({
          Bucket: 'example',
          Key: 'foo',
          Body: new Stream
        }).send();
        return expect(resp.request.httpRequest.headers['Content-MD5']).toEqual(void 0);
      });
      return it('computes checksums if computeChecksums is on and ContentMD5 is not provided', function() {
        return willCompute('putBucketAcl', {
          computeChecksums: true
        });
      });
    });
    return describe('getSignedUrl', function() {
      var date;
      date = null;
      beforeEach(function() {
        date = AWS.util.date.getDate;
        return AWS.util.date.getDate = function() {
          return new Date(0);
        };
      });
      afterEach(function() {
        return AWS.util.date.getDate = date;
      });
      it('gets a signed URL for getObject', function() {
        var url;
        url = s3.getSignedUrl('getObject', {
          Bucket: 'bucket',
          Key: 'key'
        });
        return expect(url).toEqual('https://bucket.s3.amazonaws.com/key?AWSAccessKeyId=akid&Expires=900&Signature=uefzBaGpqvO9QhGtT%2BbYda0pgQY%3D');
      });
      it('gets a signed URL with Expires time', function() {
        var url;
        url = s3.getSignedUrl('getObject', {
          Bucket: 'bucket',
          Key: 'key',
          Expires: 60
        });
        return expect(url).toEqual('https://bucket.s3.amazonaws.com/key?AWSAccessKeyId=akid&Expires=60&Signature=ZJKBOuhI99B2OZdkGSOmfG86BOI%3D');
      });
      it('gets a signed URL with callback', function() {
        var url;
        url = null;
        runs(function() {
          return s3.getSignedUrl('getObject', {
            Bucket: 'bucket',
            Key: 'key'
          }, function(err, value) {
            return url = value;
          });
        });
        waitsFor(function() {
          return url;
        });
        return runs(function() {
          return expect(url).toEqual('https://bucket.s3.amazonaws.com/key?AWSAccessKeyId=akid&Expires=900&Signature=uefzBaGpqvO9QhGtT%2BbYda0pgQY%3D');
        });
      });
      it('gets a signed URL for putObject with no body', function() {
        var url;
        url = s3.getSignedUrl('putObject', {
          Bucket: 'bucket',
          Key: 'key'
        });
        return expect(url).toEqual('https://bucket.s3.amazonaws.com/key?AWSAccessKeyId=akid&Expires=900&Signature=h%2FphNvPoGxx9qq2U7Zhbfqgi0Xs%3D');
      });
      it('gets a signed URL for putObject with a body (and checksum)', function() {
        var url;
        url = s3.getSignedUrl('putObject', {
          Bucket: 'bucket',
          Key: 'key',
          Body: 'body'
        });
        return expect(url).toEqual('https://bucket.s3.amazonaws.com/key?AWSAccessKeyId=akid&Content-MD5=hBotaJrYa9FhFEdFPCLG%2FA%3D%3D&Expires=900&Signature=7%2BXiHEwB%2B3nSg2rhTyatSigkGPI%3D');
      });
      return it('gets a signed URL and appends to existing query parameters', function() {
        var url;
        url = s3.getSignedUrl('listObjects', {
          Bucket: 'bucket',
          Prefix: 'prefix'
        });
        return expect(url).toEqual('https://bucket.s3.amazonaws.com/?prefix=prefix&AWSAccessKeyId=akid&Expires=900&Signature=fWeCHJBop4LyDXm2%2F%2BvR%2BqzH5zk%3D');
      });
    });
  });

}).call(this);

//# sourceMappingURL=s3.spec.map
