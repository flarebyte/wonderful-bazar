// Generated by CoffeeScript 1.7.1
(function() {
  var AWS;

  AWS = require('../../lib/core');

  require('../../lib/service_interface/query');

  require('../../lib/signers/v2');

  describe('AWS.Signers.V2', function() {
    var buildRequest, buildSigner, credentials, date, request, signRequest, signer, stringify;
    credentials = null;
    date = null;
    request = null;
    signer = null;
    buildRequest = function() {
      request = new AWS.HttpRequest(new AWS.Endpoint('localhost'));
      request.params = {};
      return request;
    };
    buildSigner = function(request) {
      return new AWS.Signers.V2(request);
    };
    signRequest = function(request) {
      signer = new AWS.Signers.V2(request);
      return signer.addAuthorization(credentials, date);
    };
    beforeEach(function() {
      credentials = {
        accessKeyId: 'akid',
        secretAccessKey: 'secret'
      };
      date = new Date(1935346573456);
      return signRequest(buildRequest());
    });
    stringify = AWS.util.queryParamsToString;
    describe('constructor', function() {
      return it('builds a signer for a request object', function() {
        return expect(signer.request).toBe(request);
      });
    });
    return describe('addAuthorization', function() {
      it('adds a url encoded iso8601 timestamp param', function() {
        return expect(stringify(request.params)).toMatch(/Timestamp=2031-04-30T20%3A16%3A13.456Z/);
      });
      it('adds a SignatureVersion param', function() {
        return expect(stringify(request.params)).toMatch(/SignatureVersion=2/);
      });
      it('adds a SignatureMethod param', function() {
        return expect(stringify(request.params)).toMatch(/SignatureMethod=HmacSHA256/);
      });
      it('adds an AWSAccessKeyId param', function() {
        return expect(stringify(request.params)).toMatch(/AWSAccessKeyId=akid/);
      });
      it('omits SecurityToken when sessionToken has been omitted', function() {
        return expect(stringify(request.params)).not.toMatch(/SecurityToken/);
      });
      it('adds the SecurityToken when sessionToken is provided', function() {
        credentials.sessionToken = 'session';
        signRequest(buildRequest());
        return expect(stringify(request.params)).toMatch(/SecurityToken=session/);
      });
      it('populates the body', function() {
        return expect(request.body).toEqual('AWSAccessKeyId=akid&Signature=%2FrumhWptMPvyb4aaeOv5iGpl6%2FLfs5uVHu8k1d3NNfc%3D&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=2031-04-30T20%3A16%3A13.456Z');
      });
      it('populates content-length header', function() {
        return expect(request.headers['Content-Length']).toEqual(165);
      });
      return it('signs additional body params', function() {
        request = buildRequest();
        request.params['Param.1'] = 'abc';
        request.params['Param.2'] = 'xyz';
        signRequest(request);
        return expect(request.body).toEqual('AWSAccessKeyId=akid&Param.1=abc&Param.2=xyz&Signature=3pcXIWw0eVd4wFmp%2Blo24L93UTMGcYSNE%2BFYNNqzDts%3D&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=2031-04-30T20%3A16%3A13.456Z');
      });
    });
  });

}).call(this);

//# sourceMappingURL=v2.spec.map
