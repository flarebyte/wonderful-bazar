// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, buildRequest, buildSigner, helpers;

  AWS = require('../../lib/core');

  helpers = require('../helpers');

  require('../../lib/services/dynamodb');

  beforeEach(function() {
    return spyOn(AWS.util, 'userAgent').andReturn('aws-sdk-js/0.1');
  });

  buildRequest = function() {
    var ddb, req, resp;
    ddb = new AWS.DynamoDB.Client({
      region: 'region',
      endpoint: 'localhost',
      apiVersion: '2011-12-05'
    });
    req = ddb.makeRequest('listTables', {
      foo: 'b√•r'
    });
    resp = new AWS.Response(req);
    req.emitEvents(['validate', 'build', 'afterBuild'], resp);
    return req.httpRequest;
  };

  buildSigner = function(request) {
    return new AWS.Signers.V4(request || buildRequest(), 'dynamodb');
  };

  describe('AWS.Signers.V4', function() {
    var authorization, creds, date, datetime, signature, signer;
    date = new Date(1935346573456);
    datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');
    creds = {
      accessKeyId: 'akid',
      secretAccessKey: 'secret',
      sessionToken: 'session'
    };
    signature = '98f67f143b30a6de9c4a9f03fb33b0b0f78d664ba5d7195e4dc420bdb3cd94f2';
    authorization = 'AWS4-HMAC-SHA256 Credential=akid/20310430/region/dynamodb/aws4_request, ' + 'SignedHeaders=content-length;content-type;date;host;user-agent;x-amz-date;x-amz-security-token;x-amz-target, ' + 'Signature=' + signature;
    signer = null;
    beforeEach(function() {
      signer = buildSigner();
      return signer.addHeaders(creds, datetime);
    });
    describe('constructor', function() {
      return it('can build a signer for a request object', function() {
        var req;
        req = buildRequest();
        signer = buildSigner(req);
        return expect(signer.request).toBe(req);
      });
    });
    describe('addAuthorization', function() {
      var headers, key, value, _results;
      headers = {
        'Content-Type': 'application/x-amz-json-1.0',
        'Content-Length': 14,
        'X-Amz-Target': 'DynamoDB_20111205.ListTables',
        'Host': 'localhost',
        'Date': datetime,
        'X-Amz-Date': datetime,
        'X-Amz-Security-Token': 'session',
        'Authorization': authorization
      };
      beforeEach(function() {
        return signer.addAuthorization(creds, date);
      });
      _results = [];
      for (key in headers) {
        value = headers[key];
        _results.push(it('should add ' + key + ' header', function() {
          key = this.description.match(/(\S+) header/)[1];
          return expect(signer.request.headers[key]).toEqual(headers[key]);
        }));
      }
      return _results;
    });
    describe('authorization', function() {
      return it('should return authorization part for signer', function() {
        return expect(signer.authorization(creds, datetime)).toEqual(authorization);
      });
    });
    describe('signature', function() {
      return it('should generate proper signature', function() {
        return expect(signer.signature(creds, datetime)).toEqual(signature);
      });
    });
    describe('stringToSign', function() {
      return it('should sign correctly generated input string', function() {
        return expect(signer.stringToSign(datetime)).toEqual('AWS4-HMAC-SHA256\n' + datetime + '\n' + '20310430/region/dynamodb/aws4_request\n' + signer.hexEncodedHash(signer.canonicalString()));
      });
    });
    return describe('canonicalHeaders', function() {
      it('should return headers', function() {
        return expect(signer.canonicalHeaders()).toEqual(['content-length:14', 'content-type:application/x-amz-json-1.0', 'date:' + datetime, 'host:localhost', 'user-agent:' + AWS.util.userAgent(), 'x-amz-date:' + datetime, 'x-amz-security-token:session', 'x-amz-target:DynamoDB_20111205.ListTables'].join('\n'));
      });
      it('should ignore Authorization header', function() {
        signer.request.headers = {
          'Authorization': 'foo'
        };
        return expect(signer.canonicalHeaders()).toEqual('');
      });
      it('should lowercase all header names (not values)', function() {
        signer.request.headers = {
          'FOO': 'BAR'
        };
        return expect(signer.canonicalHeaders()).toEqual('foo:BAR');
      });
      it('should sort headers by key', function() {
        signer.request.headers = {
          abc: 'a',
          bca: 'b',
          Qux: 'c',
          bar: 'd'
        };
        return expect(signer.canonicalHeaders()).toEqual('abc:a\nbar:d\nbca:b\nqux:c');
      });
      it('should compact multiple spaces in keys/values to a single space', function() {
        signer.request.headers = {
          'Header': 'Value     with  Multiple   \t spaces'
        };
        return expect(signer.canonicalHeaders()).toEqual('header:Value with Multiple spaces');
      });
      return it('should strip starting and end of line spaces', function() {
        signer.request.headers = {
          'Header': ' \t   Value  \t  '
        };
        return expect(signer.canonicalHeaders()).toEqual('header:Value');
      });
    });
  });

}).call(this);

//# sourceMappingURL=v4.spec.map
