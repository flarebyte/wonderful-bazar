// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var CT, init, magma_plugin_db, myself, should, simpleModel, util, _;

  init = require("fb-custom-init");

  magma_plugin_db = require('magma-plugin-db');

  should = require('should');

  CT = require('magma-constant');

  _ = require('lodash');

  util = require('util');

  simpleModel = {
    __meta: {
      domain: "user",
      recordType: CT.TYPE_USER_ID,
      idLength: CT.LEN_USER_ID,
      pkGenerator: function() {
        return "pk33";
      }
    }
  };

  myself = {
    ownerRef: CT.EX_OWNER_U1,
    gateId: CT.EX_GATE_ID,
    ownerRefs: [CT.EX_OWNER_U1, CT.EX_OWNER_U2]
  };


  /*
  ======== A Handy Little Mocha Reference ========
  https://github.com/visionmedia/should.js
  https://github.com/visionmedia/mocha
   */

  describe("magma-plugin-db", function() {
    describe('#pairToMap()', function() {
      return it('convert a pair to a map', function() {
        var expected, m;
        expected = {
          Name: 'alpha',
          Value: 'bravo',
          Replace: true
        };
        m = magma_plugin_db.pairToMap('alpha', 'bravo', true);
        return m.should.eql(expected);
      });
    });
    describe('#mapToPair()', function() {
      it('convert a pair to a map', function() {
        var expected, given, obj, pair;
        given = {
          Name: 'alpha',
          Value: 'bravo',
          Replace: true
        };
        obj = {
          "mustbe": "ok"
        };
        expected = {
          mustbe: 'ok',
          alpha: 'bravo'
        };
        pair = magma_plugin_db.mapToPair(given, obj);
        return pair.should.eql(expected);
      });
      return it('appends pair if existing there', function() {
        var expected, given, obj, pair;
        given = {
          Name: 'alpha',
          Value: 'bravo',
          Replace: true
        };
        obj = {
          "mustbe": "ok",
          alpha: "previous"
        };
        expected = {
          mustbe: 'ok',
          alpha: ['previous', 'bravo']
        };
        pair = magma_plugin_db.mapToPair(given, obj);
        return pair.should.eql(expected);
      });
    });
    describe('#objToSimpleObject()', function() {
      return it('convert an object to Amazon SDB object', function() {
        var expected, given, r;
        given = {
          alpha: 'bravo',
          beta: ["charlie", "tango"],
          __hidden: "any"
        };
        expected = [
          {
            Name: "alpha",
            Value: "bravo",
            Replace: true
          }, {
            Name: "beta",
            Value: "charlie",
            Replace: true
          }, {
            Name: "beta",
            Value: "tango",
            Replace: true
          }
        ];
        r = magma_plugin_db.objToSimpleObject(given);
        return r.should.eql(expected);
      });
    });
    describe('#simpleObjectToObj()', function() {
      return it('convert Amazon SDB object to object', function() {
        var expected, given, r;
        expected = {
          alpha: 'bravo',
          beta: ["charlie", "tango"]
        };
        given = [
          {
            Name: "alpha",
            Value: "bravo",
            Replace: true
          }, {
            Name: "beta",
            Value: "charlie",
            Replace: true
          }, {
            Name: "beta",
            Value: "tango",
            Replace: true
          }
        ];
        r = magma_plugin_db.simpleObjectToObj(given);
        return r.should.eql(expected);
      });
    });
    describe('#ensurePrimaryKey()', function() {
      return it('ensure a primary key is provided', function() {
        var ctx, expected, given, meta, model, pkGen;
        pkGen = function(record) {
          return "id33";
        };
        meta = {
          pkGenerator: pkGen
        };
        model = {
          __meta: meta
        };
        ctx = {
          model: model
        };
        given = {
          alpha: 'bravo'
        };
        expected = {
          alpha: 'bravo',
          primaryKey: "id33"
        };
        magma_plugin_db.ensurePrimaryKey(ctx, given);
        return given.should.eql(expected);
      });
    });
    describe('#ensureId()', function() {
      return it('ensure an id is provided', function() {
        var ctx, given, meta, model;
        meta = {
          recordType: "rt",
          idLength: 8
        };
        model = {
          __meta: meta
        };
        ctx = {
          model: model
        };
        given = {
          alpha: 'bravo'
        };
        magma_plugin_db.ensureId(ctx, given);
        return given.id.should.have.length(10);
      });
    });
    describe('#ensureUpdated()', function() {
      it('creates created and updated field', function() {
        var ctx, given;
        ctx = {};
        given = {
          alpha: 'bravo'
        };
        magma_plugin_db.ensureUpdated(ctx, given);
        given.alpha.should.eql('bravo');
        given.updated.should.match(CT.REGEX_ISO_DATETIME);
        return given.created.should.match(CT.REGEX_ISO_DATETIME);
      });
      return it('updates created and updated field', function() {
        var ctx, given;
        ctx = {};
        given = {
          alpha: 'bravo',
          created: 'yes',
          updated: 'sure'
        };
        magma_plugin_db.ensureUpdated(ctx, given);
        given.alpha.should.eql('bravo');
        given.updated.should.match(CT.REGEX_ISO_DATETIME);
        given.created.should.eql('yes');
        return given.__hidden.previousUpdated.should.eql('sure');
      });
    });
    describe('#expectedNewOrUpdate()', function() {
      it('accepts no expectation', function() {
        var ctx, given, r;
        ctx = {};
        given = {
          alpha: 'bravo'
        };
        r = magma_plugin_db.expectedNewOrUpdate(ctx, given);
        return should.not.exist(r);
      });
      it('accepts new objects', function() {
        var ctx, expected, given, r;
        ctx = {};
        given = {
          alpha: 'bravo',
          __hidden: {
            state: 'new'
          }
        };
        expected = {
          Name: 'updated',
          Exists: false
        };
        r = magma_plugin_db.expectedNewOrUpdate(ctx, given);
        return r.should.eql(expected);
      });
      return it('accepts update of objects', function() {
        var ctx, expected, given, r;
        ctx = {};
        given = {
          alpha: 'bravo',
          __hidden: {
            state: 'update',
            previousUpdated: 'Y'
          }
        };
        expected = {
          Name: 'updated',
          Exists: true,
          Value: 'Y'
        };
        r = magma_plugin_db.expectedNewOrUpdate(ctx, given);
        return r.should.eql(expected);
      });
    });
    describe('#toAttributes()', function() {
      return it('convert an object to Amazon Attributes', function() {
        var ctx, given, r;
        ctx = {
          my: myself,
          model: simpleModel
        };
        given = {
          alpha: 'bravo',
          __hidden: "any"
        };
        r = magma_plugin_db.toAttributes(ctx, given);
        return should.exist(r);
      });
    });
    describe('#toItems()', function() {
      return it('convert an objects to Amazon items', function() {
        var ctx, given, r;
        ctx = {
          my: myself,
          model: simpleModel
        };
        given = [
          {
            alpha: 'bravo',
            __hidden: "any"
          }
        ];
        r = magma_plugin_db.toItems(ctx, given);
        return should.exist(r);
      });
    });
    describe('#toIds()', function() {
      return it('convert an objects to Amazon items', function() {
        var ctx, given, r;
        ctx = {
          model: simpleModel
        };
        given = [
          {
            alpha: 'bravo',
            __hidden: "any",
            primaryKey: "key123"
          }
        ];
        r = magma_plugin_db.toIds(ctx, given);
        return should.exist(r);
      });
    });
    describe('#sqlQuote()', function() {
      return it('quotes SQL value', function() {
        var expected, m;
        expected = '\'o\'\'reilly\'';
        m = magma_plugin_db.sqlQuote("o'reilly");
        return m.should.eql(expected);
      });
    });
    return describe('#sqlQuoteList()', function() {
      return it('quotes list of SQL values', function() {
        var expected, m;
        expected = '\'o\'\'reilly\',\'alpha\'';
        m = magma_plugin_db.sqlQuoteList(["o'reilly", "alpha"]);
        return m.should.eql(expected);
      });
    });
  });

}).call(this);

//# sourceMappingURL=magma-plugin-db_test.map
