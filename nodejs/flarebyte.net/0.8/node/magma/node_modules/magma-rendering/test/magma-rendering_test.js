// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var CT, init, magma_rendering, should, _;

  init = require("fb-custom-init");

  magma_rendering = require('magma-rendering');

  should = require('should');

  CT = require('magma-constant');

  _ = require('lodash');


  /*
  ======== A Handy Little Mocha Reference ========
  https://github.com/visionmedia/should.js
  https://github.com/visionmedia/mocha
   */

  describe('magma-rendering', function() {
    describe('#checkRequisite()', function() {
      it('should got next if everything is fine', function(done) {
        var req, res;
        req = {
          get: function(key) {
            switch (key) {
              case "ownerRef":
                return CT.EX_OWNER_U1;
              case "gateId":
                return CT.EX_GATE_ID;
              default:
                return null;
            }
          },
          params: {
            id: "785703264"
          }
        };
        res = {};
        return magma_rendering.checkRequisite(req, res, function(next) {
          var tx;
          tx = req.tx;
          tx.should.exist;
          should.not.exist(req.errorUUID);
          return done();
        });
      });
      it('should fail if no ownerRef', function(done) {
        var req, res, sendValue;
        sendValue = null;
        req = {
          get: function(key) {
            switch (key) {
              case "ownerRef":
                return null;
              case "gateId":
                return CT.EX_GATE_ID;
              default:
                return null;
            }
          },
          params: {
            id: "785703264"
          }
        };
        res = {
          send: function(status, message) {
            return sendValue = status;
          }
        };
        return magma_rendering.checkRequisite(req, res, function(next) {
          should.exist(req.errorUUID);
          sendValue.should.eql(401);
          return done();
        });
      });
      it('should fail if incorrect ownerRef', function(done) {
        var req, res, sendValue;
        sendValue = null;
        req = {
          get: function(key) {
            switch (key) {
              case "ownerRef":
                return "silly: olivier@gmail.com";
              case "gateId":
                return CT.EX_GATE_ID;
              default:
                return null;
            }
          },
          params: {
            id: "390631980"
          }
        };
        res = {
          send: function(status, message) {
            return sendValue = status;
          }
        };
        return magma_rendering.checkRequisite(req, res, function(next) {
          should.exist(req.errorUUID);
          sendValue.should.eql(401);
          return done();
        });
      });
      it('should fail if incorrect gateId', function(done) {
        var req, res, sendValue;
        sendValue = null;
        req = {
          get: function(key) {
            switch (key) {
              case "ownerRef":
                return CT.EX_OWNER_U1;
              case "gateId":
                return " ";
              default:
                return null;
            }
          },
          params: {
            id: "785703264"
          }
        };
        res = {
          send: function(status, message) {
            return sendValue = status;
          }
        };
        return magma_rendering.checkRequisite(req, res, function(next) {
          should.exist(req.errorUUID);
          sendValue.should.eql(412);
          return done();
        });
      });
      return it('should fail if incorrect viewId', function(done) {
        var req, res, sendValue;
        sendValue = null;
        req = {
          get: function(key) {
            switch (key) {
              case "ownerRef":
                return CT.EX_OWNER_U1;
              case "gateId":
                return CT.EX_GATE_ID;
              default:
                return null;
            }
          },
          params: {
            id: "999999999"
          }
        };
        res = {
          send: function(status, message) {
            return sendValue = status;
          }
        };
        return magma_rendering.checkRequisite(req, res, function(next) {
          should.exist(req.errorUUID);
          sendValue.should.eql(404);
          return done();
        });
      });
    });
    return describe('#methodToVerb()', function() {
      return it('should converts http method to constant', function() {
        var meth;
        meth = magma_rendering.methodToVerb('get');
        return meth.should.eql(CT.VERB_GET);
      });
    });
  });

}).call(this);

//# sourceMappingURL=magma-rendering_test.map
