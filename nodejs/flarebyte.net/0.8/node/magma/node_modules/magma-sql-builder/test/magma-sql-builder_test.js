// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var CT, PAD, PIVOT, init, myself, should, simpleModel, sql, userCtx, _;

  init = require("fb-custom-init");

  sql = require('magma-sql-builder');

  should = require('should');

  CT = require('magma-constant');

  _ = require('lodash');

  PIVOT = 1000000000000;

  PAD = 15;

  simpleModel = {
    __meta: {
      domain: "user",
      recordType: CT.TYPE_USER_ID,
      idLength: CT.LEN_USER_ID,
      pkGenerator: function() {
        return "pk33";
      }
    }
  };

  myself = {
    ownerRef: CT.EX_OWNER_U1,
    gateId: CT.EX_GATE_ID,
    ownerRefs: [CT.EX_OWNER_U1, CT.EX_OWNER_U2]
  };

  userCtx = {
    my: myself,
    model: simpleModel
  };


  /*
  ======== A Handy Little Mocha Reference ========
  https://github.com/visionmedia/should.js
  https://github.com/visionmedia/mocha
   */

  describe('magma-sql-builder', function() {
    describe('#equal', function() {
      it('should manage equalString comparison', function() {
        return sql.equalString("c7", "k27").should.eql("c7='k27'");
      });
      it('should manage equalBool comparison', function() {
        return sql.equalBool("c7", "true").should.eql("c7='T'");
      });
      it('should manage equalInt comparison', function() {
        return sql.equalInt("c7", 10).should.eql("idx.int.c7='001000000000010'");
      });
      it('should manage equalFloat comparison', function() {
        return sql.equalFloat("c7", 10.4).should.eql("idx.float.c7='001000000000010.4'");
      });
      it('should manage equalSound comparison', function() {
        var expected;
        expected = "(idx.metaphone.c7='BTFL' AND " + "idx.metaphone.c7='IS' AND " + "idx.metaphone.c7='LF')";
        return sql.equalSound("c7", "life is beautiful").should.eql(expected);
      });
      return it('should manage equalStem comparison', function() {
        var expected;
        expected = "(idx.stem.c7='beauti' AND " + "idx.stem.c7='life')";
        return sql.equalStem("c7", "life is beautiful").should.eql(expected);
      });
    });
    describe('Time related', function() {
      var tim;
      tim = CT.EX_ISO_DATETIME;
      it('should manage equalDate comparison', function() {
        return sql.equalDate("c7", tim).should.eql("idx.date.c7='2013-06-13'");
      });
      it('should manage equalYearMonth comparison', function() {
        return sql.equalYearMonth("c7", tim).should.eql("idx.yearmonth.c7='2013-06'");
      });
      it('should manage equalYearMonth comparison', function() {
        return sql.equalDayOfWeek("c7", tim).should.eql("idx.dayofweek.c7='4'");
      });
      it('should manage equalTime comparison', function() {
        return sql.equalTime("c7", tim).should.eql("idx.time.c7='01:32:45'");
      });
      return it('should manage equalHour comparison', function() {
        return sql.equalHour("c7", tim).should.eql("idx.hour.c7='01'");
      });
    });
    describe('Different', function() {
      it('should manage notEqualString comparison', function() {
        return sql.notEqualString("c7", "k27").should.eql("c7!='k27'");
      });
      it('should manage notEqualBool comparison', function() {
        return sql.notEqualBool("c7", "true").should.eql("c7!='T'");
      });
      it('should manage notEqualInt comparison', function() {
        return sql.notEqualInt("c7", 10).should.eql("idx.int.c7!='001000000000010'");
      });
      it('should manage notEqualFloat comparison', function() {
        sql.notEqualFloat("c7", 10.4).should.eql;
        return "idx.float.c7!='001000000000010.4'";
      });
      it('should manage notEqualSound comparison', function() {
        var expected;
        expected = "NOT (idx.metaphone.c7='BTFL' AND " + "idx.metaphone.c7='IS' AND " + "idx.metaphone.c7='LF')";
        return sql.notEqualSound("c7", "life is beautiful").should.eql(expected);
      });
      return it('should manage notEqualStem comparison', function() {
        var expected;
        expected = "NOT (idx.stem.c7='beauti' AND " + "idx.stem.c7='life')";
        return sql.notEqualStem("c7", "life is beautiful").should.eql(expected);
      });
    });
    describe('#like', function() {
      it('should manage beginWithString comparison', function() {
        return sql.beginWithString("c7", "k27").should.eql("c7 like 'k27%'");
      });
      return it('should manage endWithString comparison', function() {
        return sql.endWithString("c7", "k27").should.eql("c7 like '%k27'");
      });
    });
    describe('#is or is not', function() {
      it('should manage isNullString comparison', function() {
        return sql.isNullString("c7", "k27").should.eql("c7 is null");
      });
      return it('should manage isNotNullString comparison', function() {
        return sql.isNotNullString("c7", "k27").should.eql("c7 is not null");
      });
    });
    describe('#string comparison', function() {
      it('should manage greaterOrEqualString comparison', function() {
        return sql.greaterOrEqualString("c7", "k27").should.eql("c7>='k27'");
      });
      it('should manage greaterString comparison', function() {
        return sql.greaterString("c7", "k27").should.eql("c7>'k27'");
      });
      it('should manage lessOrEqualString comparison', function() {
        return sql.lessOrEqualString("c7", "k27").should.eql("c7<='k27'");
      });
      it('should manage lessString comparison', function() {
        return sql.lessString("c7", "k27").should.eql("c7<'k27'");
      });
      return it('should manage betweenString comparison', function() {
        sql.betweenString("c7", "k27").should.eql;
        return "c7 between '${a_c7}' and '${b.c7}'";
      });
    });
    describe('#int comparison', function() {
      it('should manage greaterOrEqualInt comparison', function() {
        var expected;
        expected = "idx.int.c7>='001000000000010'";
        return sql.greaterOrEqualInt("c7", 10).should.eql(expected);
      });
      it('should manage greaterInt comparison', function() {
        return sql.greaterInt("c7", 10).should.eql("idx.int.c7>'001000000000010'");
      });
      it('should manage lessOrEqualInt comparison', function() {
        return sql.lessOrEqualInt("c7", 10).should.eql("idx.int.c7<='001000000000010'");
      });
      it('should manage lessInt comparison', function() {
        return sql.lessInt("c7", 10).should.eql("idx.int.c7<'001000000000010'");
      });
      return it('should manage betweenInt comparison', function() {
        var expected;
        expected = "idx.int.c7 between '001000000000010' and '001000000000012'";
        return sql.betweenInt("c7", [10, 12]).should.eql(expected);
      });
    });
    describe('#float comparison', function() {
      it('should manage greaterOrEqualFloat comparison', function() {
        var expected;
        expected = "idx.float.c7>='001000000000010.4'";
        return sql.greaterOrEqualFloat("c7", 10.4).should.eql(expected);
      });
      it('should manage greaterFloat comparison', function() {
        return sql.greaterFloat("c7", 10.4).should.eql("idx.float.c7>'001000000000010.4'");
      });
      it('should manage lessOrEqualFloat comparison', function() {
        var expected;
        expected = "idx.float.c7<='001000000000010.4'";
        return sql.lessOrEqualFloat("c7", 10.4).should.eql(expected);
      });
      it('should manage lessFloat comparison', function() {
        return sql.lessFloat("c7", 10.4).should.eql("idx.float.c7<'001000000000010.4'");
      });
      return it('should manage betweenFloat comparison', function() {
        var expected;
        expected = "idx.float.c7 between '001000000000010.4'" + " and '001000000000010.8'";
        return sql.betweenFloat("c7", [10.4, 10.8]).should.eql(expected);
      });
    });
    describe('#date comparison', function() {
      var tim;
      tim = CT.EX_ISO_DATETIME;
      it('should manage greaterOrEqualDate comparison', function() {
        var expected;
        expected = "idx.date.c7>='2013-06-13'";
        return sql.greaterOrEqualDate("c7", tim).should.eql(expected);
      });
      it('should manage greaterDate comparison', function() {
        return sql.greaterDate("c7", tim).should.eql("idx.date.c7>'2013-06-13'");
      });
      it('should manage lessOrEqualDate comparison', function() {
        var expected;
        expected = "idx.date.c7<='2013-06-13'";
        return sql.lessOrEqualDate("c7", tim).should.eql(expected);
      });
      it('should manage lessDate comparison', function() {
        return sql.lessDate("c7", tim).should.eql("idx.date.c7<'2013-06-13'");
      });
      return it('should manage betweenDate comparison', function() {
        sql.betweenDate("c7", [tim, tim]).should.eql;
        return "idx.date.c7 between '2013-06-13' and '2013-06-13'";
      });
    });
    describe('#time comparison', function() {
      var tim;
      tim = CT.EX_ISO_DATETIME;
      it('should manage greaterOrEqualTime comparison', function() {
        var expected;
        expected = "idx.time.c7>='01:32:45'";
        return sql.greaterOrEqualTime("c7", tim).should.eql(expected);
      });
      it('should manage greaterTime comparison', function() {
        return sql.greaterTime("c7", tim).should.eql("idx.time.c7>'01:32:45'");
      });
      it('should manage lessOrEqualTime comparison', function() {
        var expected;
        expected = "idx.time.c7<='01:32:45'";
        return sql.lessOrEqualTime("c7", tim).should.eql(expected);
      });
      it('should manage lessTime comparison', function() {
        return sql.lessTime("c7", tim).should.eql("idx.time.c7<'01:32:45'");
      });
      return it('should manage betweenTime comparison', function() {
        var expected;
        expected = "idx.time.c7 between '01:32:45' and '01:32:45'";
        return sql.betweenTime("c7", [tim, tim]).should.eql(expected);
      });
    });
    describe('#year-month comparison', function() {
      var tim;
      tim = CT.EX_ISO_DATETIME;
      it('should manage greaterOrEqualYearMonth comparison', function() {
        var expected;
        expected = "idx.yearmonth.c7>='2013-06'";
        return sql.greaterOrEqualYearMonth("c7", tim).should.eql(expected);
      });
      it('should manage greaterYearMonth comparison', function() {
        return sql.greaterYearMonth("c7", tim).should.eql("idx.yearmonth.c7>'2013-06'");
      });
      it('should manage lessOrEqualYearMonth comparison', function() {
        var expected;
        expected = "idx.yearmonth.c7<='2013-06'";
        return sql.lessOrEqualYearMonth("c7", tim).should.eql(expected);
      });
      it('should manage lessYearMonth comparison', function() {
        return sql.lessYearMonth("c7", tim).should.eql("idx.yearmonth.c7<'2013-06'");
      });
      return it('should manage betweenYearMonth comparison', function() {
        var expected;
        expected = "idx.yearmonth.c7 between '2013-06' and '2013-06'";
        return sql.betweenYearMonth("c7", [tim, tim]).should.eql(expected);
      });
    });
    describe('#hour comparison', function() {
      var tim;
      tim = CT.EX_ISO_DATETIME;
      it('should manage greaterOrEqualHour comparison', function() {
        var expected;
        expected = "idx.hour.c7>='01'";
        return sql.greaterOrEqualHour("c7", tim).should.eql(expected);
      });
      it('should manage greaterHour comparison', function() {
        return sql.greaterHour("c7", tim).should.eql("idx.hour.c7>'01'");
      });
      it('should manage lessOrEqualHour comparison', function() {
        var expected;
        expected = "idx.hour.c7<='01'";
        return sql.lessOrEqualHour("c7", tim).should.eql(expected);
      });
      it('should manage lessHour comparison', function() {
        return sql.lessHour("c7", tim).should.eql("idx.hour.c7<'01'");
      });
      return it('should manage betweenHour comparison', function() {
        var expected;
        expected = "idx.hour.c7 between '01' and '01'";
        return sql.betweenHour("c7", [tim, tim]).should.eql(expected);
      });
    });
    describe('#in comparison', function() {
      it('should manage isInString comparison', function() {
        var expected;
        expected = "c7 in ('aa','bb','cc')";
        return sql.isInString("c7", ["aa", "bb", "cc"]).should.eql(expected);
      });
      it('should manage isInInt comparison', function() {
        var expected;
        expected = "idx.int.c7 in ('001000000000012','001000000000003'," + "'001000000000014')";
        return sql.isInInt("c7", ["12", 3, "14"]).should.eql(expected);
      });
      it('should manage isInFloat comparison', function() {
        var expected;
        expected = "idx.float.c7 in ('001000000000012.3','001000000000003.5'," + "'001000000000014.6')";
        return sql.isInFloat("c7", ["12.3", 3.5, "14.6"]).should.eql(expected);
      });
      it('should manage isInSound comparison', function() {
        var expected;
        expected = "idx.metaphone.c7 in ('ALF','BT','SHRL')";
        return sql.isInSound("c7", ["alpha", "beta", "charlie"]).should.eql(expected);
      });
      return it('should manage isInStem comparison', function() {
        var expected;
        expected = "idx.stem.c7 in ('alpha','beta','charli')";
        return sql.isInStem("c7", ["alpha", "beta", "charlie"]).should.eql(expected);
      });
    });
    describe('#List scripting', function() {
      var abc, cde;
      abc = sql.where_('a', 'b', 'c');
      cde = sql.where_('c', 'd', 'e');
      it('shoud create where clause', function() {
        return sql.where_('a', 'b', 'c').should.eql(['b', 'a', 'c']);
      });
      it('shoud support not operator', function() {
        return sql.not_(abc).should.eql(['not', ['b', 'a', 'c']]);
      });
      it('shoud support and operator', function() {
        sql.and_('aa', 'bb').should.eql(['and', 'aa', 'bb']);
        return sql.and_('zz', 'bb', 'cc').should.eql(['and', 'zz', 'bb', 'cc']);
      });
      it('shoud support or operator', function() {
        sql.or_('aa', 'bb').should.eql(['or', 'aa', 'bb']);
        return sql.or_('zz', 'bb', 'cc').should.eql(['or', 'zz', 'bb', 'cc']);
      });
      it('shoud support complex query', function() {
        sql.or_(abc, sql.not_(cde)).should.eql;
        return ['or', ['b', 'a', 'c'], ['not', ['d', 'c', 'e']]];
      });
      it('shoud swap characters', function() {
        return sql.swapChar('a,b,c;e', ';', ',').should.eql('a;b;c,e');
      });
      it('converts object to string for query', function() {
        sql.toScript(sql.or_(sql.abc, sql.not_(cde))).should.eql;
        return "('or',('a','b','c'),('not',('c','d','e')))";
      });
      return it('converts string for query to object', function() {
        sql.fromScript("('or',('a','b','c'),('not',('c','d','e')))").should.eql;
        return sql.or_(abc, sql.not_(cde));
      });
    });
    describe('#normBool()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normBool(void 0));
        return should.strictEqual(null, sql.normBool(""));
      });
      return it('converts boolean values', function() {
        sql.normBool("True").should.eql("T");
        sql.normBool("False").should.eql("F");
        return sql.normBool("OFF").should.eql("F");
      });
    });
    describe('#normInt()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normInt(null));
        should.strictEqual(null, sql.normInt(void 0));
        return should.strictEqual(null, sql.normInt(""));
      });
      return it('converts integer values', function() {
        sql.normInt(123.4).should.eql("123");
        sql.normInt("127").should.eql("127");
        sql.normInt("127.2").should.eql("127");
        sql.normInt(-125.4).should.eql('-125');
        sql.normInt(0).should.eql('0');
        return sql.normInt("-0").should.eql('0');
      });
    });
    describe('#normAddInt()', function() {
      it('clears empty values', function() {
        return should.strictEqual(null, sql.normAddInt("", void 0));
      });
      return it('adds integer values', function() {
        sql.normAddInt(2.3, "10").should.eql("12");
        sql.normAddInt(null, "10").should.eql("10");
        return sql.normAddInt(-15, 10).should.eql('-5');
      });
    });
    describe('#normAwsInt()', function() {
      it('clears empty values', function() {
        return should.strictEqual(null, sql.normAwsInt(null));
      });
      return it('converts int to Aws value', function() {
        sql.normAwsInt(10).should.eql('001000000000010');
        sql.normAwsInt(-10).should.eql('000999999999990');
        sql.normAwsInt(PIVOT).should.eql('002000000000000');
        sql.normAwsInt(-1 * PIVOT).should.eql('000000000000000');
        sql.normAwsInt(-1 * PIVOT - 1).should.be.an["instanceof"](Error);
        return sql.normAwsInt(PIVOT + 1).should.be.an["instanceof"](Error);
      });
    });
    describe('#normFloat()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normFloat(null));
        should.strictEqual(null, sql.normFloat(void 0));
        return should.strictEqual(null, sql.normFloat(""));
      });
      return it('converts float values', function() {
        sql.normFloat(123.4).should.eql("123.4");
        sql.normFloat("127").should.eql("127");
        sql.normFloat("127.2").should.eql("127.2");
        sql.normFloat(-125.4).should.eql('-125.4');
        sql.normFloat(0).should.eql('0');
        return sql.normFloat("-0").should.eql('0');
      });
    });
    describe('#normAddFloat()', function() {
      it('clears empty values', function() {
        return should.strictEqual(null, sql.normAddFloat("", void 0));
      });
      return it('adds float values', function() {
        sql.normAddFloat(2.3, "10").should.eql("12.3");
        sql.normAddFloat(null, "10.46").should.eql("10.46");
        return sql.normAddFloat(-15.8, 10.3).should.eql('-5.5');
      });
    });
    describe('#normAwsFloat()', function() {
      it('clears empty values', function() {
        return should.strictEqual(null, sql.normAwsFloat(null));
      });
      return it('converts float to Aws value', function() {
        sql.normAwsFloat(10.4).should.eql('001000000000010.4');
        sql.normAwsFloat(-10.6).should.eql('000999999999989.4');
        sql.normAwsFloat(PIVOT).should.eql('002000000000000');
        sql.normAwsFloat(-1 * PIVOT).should.eql('000000000000000');
        sql.normAwsFloat(-1 * PIVOT - 1).should.be.an["instanceof"](Error);
        return sql.normAwsFloat(PIVOT + 1).should.be.an["instanceof"](Error);
      });
    });
    describe('#normDateTime()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normDateTime(null));
        should.strictEqual(null, sql.normDateTime(void 0));
        return should.strictEqual(null, sql.normDateTime(""));
      });
      return it('converts float to Aws value', function() {
        sql.normDateTime(new Date()).should.exist;
        sql.normDateTime('2013-02-04T10:35:24-08:00').should.eql;
        return '2013-02-04T18:35:24.000Z';
      });
    });
    describe('#normTime()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normTime(null));
        should.strictEqual(null, sql.normTime(void 0));
        return should.strictEqual(null, sql.normTime(""));
      });
      return it('converts date-time to time', function() {
        sql.normTime(new Date()).should.exist;
        return sql.normTime('2013-02-04T10:35:24-08:00').should.eql('18:35:24');
      });
    });
    describe('#normHour()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normHour(null));
        should.strictEqual(null, sql.normHour(void 0));
        return should.strictEqual(null, sql.normHour(""));
      });
      return it('converts date-time to hour', function() {
        sql.normHour(new Date()).should.exist;
        return sql.normHour('2013-02-04T10:35:24-08:00').should.eql('18');
      });
    });
    describe('#normDayOfWeek()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normDayOfWeek(null));
        should.strictEqual(null, sql.normDayOfWeek(void 0));
        return should.strictEqual(null, sql.normDayOfWeek(""));
      });
      return it('converts date-time to day of the week', function() {
        sql.normDayOfWeek(new Date()).should.exist;
        return sql.normDayOfWeek('2013-02-04T10:35:24-08:00').should.eql('1');
      });
    });
    describe('#normYearMonth()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.normYearMonth(null));
        should.strictEqual(null, sql.normYearMonth(void 0));
        return should.strictEqual(null, sql.normYearMonth(""));
      });
      return it('converts date-time to year and month', function() {
        sql.normYearMonth(new Date()).should.exist;
        sql.normYearMonth('2013-02-04T10:35:24-08:00').should.eql;
        return '2013-02';
      });
    });
    describe('#simplifyString()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.simplifyString(null));
        should.strictEqual(null, sql.simplifyString(void 0));
        return should.strictEqual(null, sql.simplifyString(""));
      });
      return it('simplifies strings of punctuations', function() {
        sql.simplifyString("Silly o'Connor, -Sentence;").should.eql;
        return 'silly o connor sentence';
      });
    });
    describe('#stemStringGB()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.stemStringGB(null));
        should.strictEqual(null, sql.stemStringGB(void 0));
        return should.strictEqual(null, sql.stemStringGB(""));
      });
      return it('stems all the words', function() {
        var sentence;
        sentence = "A wish If you're going through Hells,, keep going.";
        return sql.stemStringGB(sentence).should.eql(['hell', 'keep', 'through', 'wish', 'you']);
      });
    });
    describe('#methaphoneString()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.methaphoneString(null));
        should.strictEqual(null, sql.methaphoneString(void 0));
        return should.strictEqual(null, sql.methaphoneString(""));
      });
      return it('applies metaphone to all the words', function() {
        var sentence;
        sentence = "A wish If you're going through Hells,, keep going.";
        return sql.methaphoneString(sentence).should.eql(['0RKH', 'HLS', 'IF', 'KNK', 'KP', 'WKSH']);
      });
    });
    describe('#domainOfProfileRef()', function() {
      it('clears empty values', function() {
        should.strictEqual(null, sql.domainOfProfileRef(null));
        should.strictEqual(null, sql.domainOfProfileRef(void 0));
        return should.strictEqual(null, sql.domainOfProfileRef(""));
      });
      return it('extracts the domain informations', function() {
        return sql.domainOfProfileRef('email:z@c.b.com').should.eql(['com', 'b', 'c']);
      });
    });
    describe('statementToSQL', function() {
      var aa, bb, cc, dd, ee, ff;
      aa = sql.where_("AA", "equalString", "AAA");
      bb = sql.where_("BB", "equalStem", "BBB");
      cc = sql.where_("CC", "equalString", "CCC");
      dd = sql.where_("DD", "equalString", "DDD");
      ee = sql.where_("EE", "equalSound", "EEE");
      ff = sql.where_("FF", "equalString", "FFF");
      it('should support where predicate', function() {
        var expected, tim;
        tim = CT.EX_ISO_DATETIME;
        expected = "idx.date.col123='2013-06-13'";
        return sql.predicateToSQL(["equalDate", "col123", tim]).should.eql(expected);
      });
      return it('shoud generate SQL from array script', function() {
        var clause, expected;
        clause = sql.or_(aa, sql.not_(bb), sql.and_(cc, dd));
        expected = "(AA='AAA' OR  NOT ((idx.stem.BB='bbb'))";
        expected = expected + " OR (CC='CCC' AND DD='DDD'))";
        return sql.statementToSQL(clause).should.eql(expected);
      });
    });
    return describe('selectForUser', function() {
      var aa, bb, cc, dd, ee, ff;
      aa = sql.where_("AA", "equalString", "AAA");
      bb = sql.where_("BB", "equalStem", "BBB");
      cc = sql.where_("CC", "equalString", "CCC");
      dd = sql.where_("DD", "equalString", "DDD");
      ee = sql.where_("EE", "equalSound", "EEE");
      ff = sql.where_("FF", "equalString", "FFF");
      it('shoud generate SQL from array script', function() {
        var clause, expected;
        clause = sql.or_(aa, sql.not_(bb), sql.and_(cc, dd));
        expected = "select * from user where " + "ownerRef='email:magma.test.u1.77225432@flarebyte.com' " + "AND gateId='magma:f/gate/123456789' AND " + "(AA='AAA' OR  NOT ((idx.stem.BB='bbb'))";
        expected = expected + " OR (CC='CCC' AND DD='DDD')) limit 20";
        return sql.selectForUser(userCtx, clause).should.eql(expected);
      });
      it('shoud generate SQL from array script with sort and limit', function() {
        var clause, expected;
        clause = sql.or_(aa, sql.not_(bb), sql.and_(cc, dd));
        expected = "select * from user where " + "ownerRef='email:magma.test.u1.77225432@flarebyte.com' " + "AND gateId='magma:f/gate/123456789' AND " + "(AA='AAA' OR  NOT ((idx.stem.BB='bbb'))";
        expected = expected + " OR (CC='CCC' AND DD='DDD'))" + " order by AA DESC limit 35";
        return sql.selectForUser(userCtx, clause, "AA DESC", 35).should.eql(expected);
      });
      return it('shoud generate SQL from array script with universe', function() {
        var clause, expected, uCtx;
        clause = sql.or_(aa, sql.not_(bb), sql.and_(cc, dd));
        expected = "select * from user where " + "ownerRef='email:magma.test.u1.77225432@flarebyte.com' " + "AND gateId='magma:f/gate/123456789'" + " AND universeId='magma:f/universe/testing_olivier_27' AND " + "(AA='AAA' OR  NOT ((idx.stem.BB='bbb'))";
        expected = expected + " OR (CC='CCC' AND DD='DDD'))" + " order by AA limit 35";
        uCtx = _.cloneDeep(userCtx);
        uCtx.my.universeId = CT.EX_UNIVERSE_ID;
        return sql.selectForUser(uCtx, clause, "AA", 35).should.eql(expected);
      });
    });
  });

}).call(this);

//# sourceMappingURL=magma-sql-builder_test.map
