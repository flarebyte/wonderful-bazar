'use strict'
magma_view = require('magma-view')
should = require('should')
CT = require('magma-constant')
_ = require('lodash')


###
======== A Handy Little Mocha Reference ========
https://github.com/visionmedia/should.js
https://github.com/visionmedia/mocha
###

plugin1=
  pluginId: CT.EX_PLUGIN_ID
  options:
    a: "A1"
    b: "vb"

plugin2=
  pluginId: "magma:sys/plugin/523456789"
  options:
    a: "B2"

plugin3=
  pluginId: "magma:sys/plugin/723456789"
  options:
    a: "C3"

plugin4=
  pluginId: "magma:sys/plugin/523456789"
  options:
    a: "D4"
    c: "vb5"

plugin5=
  pluginId: "magma:sys/plugin/523456789"
  options:
    a: "E5"


validView =
  id: CT.EX_VIEW_ID
  name: "my view"
  role: CT.EX_ROLE_ID
  gateId: CT.EX_GATE_ID
  userStatus: [CT.USER_STATUS_NEW]
  plugins:
    pluginA: plugin1
    pluginB: plugin2
    pluginC: plugin3
    pluginD: plugin4
    pluginE: plugin5
  events:
    rest:
      verb: CT.VERB_GET
      parameters:
        query:
          name: "q"
          description:"Search Term"
          required: true
          regex: "\w+"
          notRegex: null
        
        limit:
          name: "limit"
          description: "Limit number of returned items"
          required: false
          regex: "\d{1,2}"
          notRegex: "(0,00)"

      flow:
        onRequest:
          taskType: CT.TASKTYPE_PARALLEL
          tasks: ["pluginA","taskBD","taskCD"]
          onSuccess:
            task: "finish"
          onError:
            task: "exit"
        taskBD:
          taskType: CT.TASKTYPE_WATERFALL
          tasks: ["pluginB","pluginD"]
          onSuccess:
            task: "exit"
          onError:
            task: "exit"
        taskCD:
          taskType: CT.TASKTYPE_PARALLEL
          tasks: ["pluginC","pluginD"]
          onSuccess:
            task: "exit"
          onError:
            task: "exit"
        finish:
          taskType: CT.TASKTYPE_WATERFALL
          tasks: ["pluginE"]
          onSuccess:
            task: "exit"
          onError:
            task: "exit"

pluginLocator=
  locate: (id)->pluginLocator.locator[id]
  validate: (plugin,callback)->
    pluginLocator.locator[plugin.pluginId].validatePlugin plugin, callback
  locator:
    "magma:sys/plugin/123456789":
      process: (options,ctx,callback)->
        a= options.a
        stack=ctx.stack
        stack= "" if not stack
        ctx.stack=stack+a
        callback(null,ctx)
      validatePlugin: (plugin, callback)->
        callback(null,true)
    "magma:sys/plugin/523456789":
      process: (options,ctx,callback)->
        a= options.a
        stack=ctx.stack
        stack= "" if not stack
        ctx.stack=stack+a
        callback(null,ctx)
      validatePlugin: (plugin, callback)->
        callback(null,true)
    "magma:sys/plugin/723456789":
      process: (options,ctx,callback)->
        a= options.a
        stack=ctx.stack
        stack= "" if not stack
        ctx.stack=stack+a
        callback(null,ctx)
      validatePlugin: (plugin, callback)->
        callback(null,true)

myself=
  ownerRef:         CT.EX_OWNER_U1
  gateId:           CT.EX_GATE_ID
  ownerRefs:        [CT.EX_OWNER_U1,CT.EX_OWNER_U2]
  roles:            [CT.EX_ROLE_ID]
  userStatus:       CT.USER_STATUS_NEW

validUserCtx=
  verb: CT.VERB_GET
  view: validView
  user: myself
  plugins: pluginLocator


describe "magma-view", ->
  describe "#validateView()", ->
    it "accepts valid view", (done)->
      magma_view.validateView validView, (e, res) ->
        if e
          done(e)
        else
          res.should.be.ok
          done()

    it "refuses invalid view", (done)->
      sp = _.cloneDeep(validView)
      sp.id = "myview123456"
      magma_view.validateView sp, (e, res) ->
        if e
          msg = e.message
          E50962688 = "E50962688: valid view ID required, not myview123456!"
          msg.should.equal [E50962688].toString()
          done()
        else
          res.should.be.false
          done()

    it "refuses invalid name", (done)->
      sp = _.cloneDeep(validView)
      sp.name= "absurd name (hack)"
      magma_view.validateView sp, (e, res) ->
        if e
          msg = e.message
          E45378420 = 'E45378420:magma:f/view.get/123456789: valid name'+
          ' required, not absurd name (hack)!'
          msg.should.equal [E45378420].toString()
          done()
        else
          res.should.be.false
          done()

  describe "#validateViewPlugins()", ->
    it "accepts valid view plugins", (done)->
      magma_view.validateViewPlugins pluginLocator, validView, (e, res) ->
        if e
          done(e)
        else
          res.should.be.ok
          done()

  describe "#checkAuthView()", ->
    it "accepts authorised user", ()->
      sp = _.cloneDeep(validUserCtx)
      result= magma_view.checkAuthView sp
      should.not.exist(result)
      should.not.exist(sp.authzError)

    it "refuses unauthorised user", ()->
      sp = _.cloneDeep(validUserCtx)
      sp.user.roles = ["badrole"]
      e= magma_view.checkAuthView sp
      should.exist(e)
      should.exist(sp.authzError)
      msg = e.message
      role=CT.EX_ROLE_ID
      user=CT.EX_OWNER_U1
      E56620717 = "E56620717: missing role #{role} for user #{user}!"
      msg.should.equal [E56620717].toString()
 
  describe "#isPlugin()", ->
    it "recognizes a plugin", (done)->
      valid= magma_view.isPlugin "pluginA", validUserCtx
      valid.should.be.true
      invalid= magma_view.isPlugin "silly", validUserCtx
      invalid.should.be.false
      done()

  describe "#taskProcess()", ->
    it "must run finish", (done)->
      cx = _.cloneDeep(validUserCtx)
      magma_view.taskProcess "finish", cx, (e, ctx) ->
        if e
          done(e)
        else
          stack=ctx.stack
          stack.should.eql("E5")
          done()
    
    it "must run taskCD", (done)->
      cx = _.cloneDeep(validUserCtx)
      magma_view.taskProcess "taskCD", cx, (e, ctx) ->
        if e
          done(e)
        else
          stack= ctx.stack
          jobdone= false
          jobdone= true if stack=="C3D4" or stack=="D4C3"
          jobdone.should.be.true
          done()

    it "must run taskBD", (done)->
      cx = _.cloneDeep(validUserCtx)
      magma_view.taskProcess "taskBD", cx, (e, ctx) ->
        if e
          done(e)
        else
          stack= ctx.stack
          jobdone= false
          jobdone= true if stack=="B2D4"
          jobdone.should.be.true
          done()

    it "must run onRequest", (done)->
      cx = _.cloneDeep(validUserCtx)
      magma_view.taskProcess "onRequest", cx, (e, ctx) ->
        if e
          done(e)
        else
          stack= ctx.stack
          jobdone= false
          expected= /^(A1|B2D4|C3D4|D4C3|E5){4}$/
          jobdone= true if expected.test(stack).should.be.true
          jobdone.should.be.true
          done()
