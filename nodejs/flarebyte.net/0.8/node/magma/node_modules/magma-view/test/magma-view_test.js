// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var CT, magma_view, myself, plugin1, plugin2, plugin3, plugin4, plugin5, pluginLocator, should, validUserCtx, validView, _;

  magma_view = require('magma-view');

  should = require('should');

  CT = require('magma-constant');

  _ = require('lodash');


  /*
  ======== A Handy Little Mocha Reference ========
  https://github.com/visionmedia/should.js
  https://github.com/visionmedia/mocha
   */

  plugin1 = {
    pluginId: CT.EX_PLUGIN_ID,
    options: {
      a: "A1",
      b: "vb"
    }
  };

  plugin2 = {
    pluginId: "magma:sys/plugin/523456789",
    options: {
      a: "B2"
    }
  };

  plugin3 = {
    pluginId: "magma:sys/plugin/723456789",
    options: {
      a: "C3"
    }
  };

  plugin4 = {
    pluginId: "magma:sys/plugin/523456789",
    options: {
      a: "D4",
      c: "vb5"
    }
  };

  plugin5 = {
    pluginId: "magma:sys/plugin/523456789",
    options: {
      a: "E5"
    }
  };

  validView = {
    id: CT.EX_VIEW_ID,
    name: "my view",
    role: CT.EX_ROLE_ID,
    gateId: CT.EX_GATE_ID,
    userStatus: [CT.USER_STATUS_NEW],
    plugins: {
      pluginA: plugin1,
      pluginB: plugin2,
      pluginC: plugin3,
      pluginD: plugin4,
      pluginE: plugin5
    },
    events: {
      rest: {
        verb: CT.VERB_GET,
        parameters: {
          query: {
            name: "q",
            description: "Search Term",
            required: true,
            regex: "\w+",
            notRegex: null
          },
          limit: {
            name: "limit",
            description: "Limit number of returned items",
            required: false,
            regex: "\d{1,2}",
            notRegex: "(0,00)"
          }
        },
        flow: {
          onRequest: {
            taskType: CT.TASKTYPE_PARALLEL,
            tasks: ["pluginA", "taskBD", "taskCD"],
            onSuccess: {
              task: "finish"
            },
            onError: {
              task: "exit"
            }
          },
          taskBD: {
            taskType: CT.TASKTYPE_WATERFALL,
            tasks: ["pluginB", "pluginD"],
            onSuccess: {
              task: "exit"
            },
            onError: {
              task: "exit"
            }
          },
          taskCD: {
            taskType: CT.TASKTYPE_PARALLEL,
            tasks: ["pluginC", "pluginD"],
            onSuccess: {
              task: "exit"
            },
            onError: {
              task: "exit"
            }
          },
          finish: {
            taskType: CT.TASKTYPE_WATERFALL,
            tasks: ["pluginE"],
            onSuccess: {
              task: "exit"
            },
            onError: {
              task: "exit"
            }
          }
        }
      }
    }
  };

  pluginLocator = {
    locate: function(id) {
      return pluginLocator.locator[id];
    },
    validate: function(plugin, callback) {
      return pluginLocator.locator[plugin.pluginId].validatePlugin(plugin, callback);
    },
    locator: {
      "magma:sys/plugin/123456789": {
        process: function(options, ctx, callback) {
          var a, stack;
          a = options.a;
          stack = ctx.stack;
          if (!stack) {
            stack = "";
          }
          ctx.stack = stack + a;
          return callback(null, ctx);
        },
        validatePlugin: function(plugin, callback) {
          return callback(null, true);
        }
      },
      "magma:sys/plugin/523456789": {
        process: function(options, ctx, callback) {
          var a, stack;
          a = options.a;
          stack = ctx.stack;
          if (!stack) {
            stack = "";
          }
          ctx.stack = stack + a;
          return callback(null, ctx);
        },
        validatePlugin: function(plugin, callback) {
          return callback(null, true);
        }
      },
      "magma:sys/plugin/723456789": {
        process: function(options, ctx, callback) {
          var a, stack;
          a = options.a;
          stack = ctx.stack;
          if (!stack) {
            stack = "";
          }
          ctx.stack = stack + a;
          return callback(null, ctx);
        },
        validatePlugin: function(plugin, callback) {
          return callback(null, true);
        }
      }
    }
  };

  myself = {
    ownerRef: CT.EX_OWNER_U1,
    gateId: CT.EX_GATE_ID,
    ownerRefs: [CT.EX_OWNER_U1, CT.EX_OWNER_U2],
    roles: [CT.EX_ROLE_ID],
    userStatus: CT.USER_STATUS_NEW
  };

  validUserCtx = {
    verb: CT.VERB_GET,
    view: validView,
    user: myself,
    plugins: pluginLocator
  };

  describe("magma-view", function() {
    describe("#validateView()", function() {
      it("accepts valid view", function(done) {
        return magma_view.validateView(validView, function(e, res) {
          if (e) {
            return done(e);
          } else {
            res.should.be.ok;
            return done();
          }
        });
      });
      it("refuses invalid view", function(done) {
        var sp;
        sp = _.cloneDeep(validView);
        sp.id = "myview123456";
        return magma_view.validateView(sp, function(e, res) {
          var E50962688, msg;
          if (e) {
            msg = e.message;
            E50962688 = "E50962688: valid view ID required, not myview123456!";
            msg.should.equal([E50962688].toString());
            return done();
          } else {
            res.should.be["false"];
            return done();
          }
        });
      });
      return it("refuses invalid name", function(done) {
        var sp;
        sp = _.cloneDeep(validView);
        sp.name = "absurd name (hack)";
        return magma_view.validateView(sp, function(e, res) {
          var E45378420, msg;
          if (e) {
            msg = e.message;
            E45378420 = 'E45378420:magma:f/view.get/123456789: valid name' + ' required, not absurd name (hack)!';
            msg.should.equal([E45378420].toString());
            return done();
          } else {
            res.should.be["false"];
            return done();
          }
        });
      });
    });
    describe("#validateViewPlugins()", function() {
      return it("accepts valid view plugins", function(done) {
        return magma_view.validateViewPlugins(pluginLocator, validView, function(e, res) {
          if (e) {
            return done(e);
          } else {
            res.should.be.ok;
            return done();
          }
        });
      });
    });
    describe("#checkAuthView()", function() {
      it("accepts authorised user", function() {
        var result, sp;
        sp = _.cloneDeep(validUserCtx);
        result = magma_view.checkAuthView(sp);
        should.not.exist(result);
        return should.not.exist(sp.authzError);
      });
      return it("refuses unauthorised user", function() {
        var E56620717, e, msg, role, sp, user;
        sp = _.cloneDeep(validUserCtx);
        sp.user.roles = ["badrole"];
        e = magma_view.checkAuthView(sp);
        should.exist(e);
        should.exist(sp.authzError);
        msg = e.message;
        role = CT.EX_ROLE_ID;
        user = CT.EX_OWNER_U1;
        E56620717 = "E56620717: missing role " + role + " for user " + user + "!";
        return msg.should.equal([E56620717].toString());
      });
    });
    describe("#isPlugin()", function() {
      return it("recognizes a plugin", function(done) {
        var invalid, valid;
        valid = magma_view.isPlugin("pluginA", validUserCtx);
        valid.should.be["true"];
        invalid = magma_view.isPlugin("silly", validUserCtx);
        invalid.should.be["false"];
        return done();
      });
    });
    return describe("#taskProcess()", function() {
      it("must run finish", function(done) {
        var cx;
        cx = _.cloneDeep(validUserCtx);
        return magma_view.taskProcess("finish", cx, function(e, ctx) {
          var stack;
          if (e) {
            return done(e);
          } else {
            stack = ctx.stack;
            stack.should.eql("E5");
            return done();
          }
        });
      });
      it("must run taskCD", function(done) {
        var cx;
        cx = _.cloneDeep(validUserCtx);
        return magma_view.taskProcess("taskCD", cx, function(e, ctx) {
          var jobdone, stack;
          if (e) {
            return done(e);
          } else {
            stack = ctx.stack;
            jobdone = false;
            if (stack === "C3D4" || stack === "D4C3") {
              jobdone = true;
            }
            jobdone.should.be["true"];
            return done();
          }
        });
      });
      it("must run taskBD", function(done) {
        var cx;
        cx = _.cloneDeep(validUserCtx);
        return magma_view.taskProcess("taskBD", cx, function(e, ctx) {
          var jobdone, stack;
          if (e) {
            return done(e);
          } else {
            stack = ctx.stack;
            jobdone = false;
            if (stack === "B2D4") {
              jobdone = true;
            }
            jobdone.should.be["true"];
            return done();
          }
        });
      });
      return it("must run onRequest", function(done) {
        var cx;
        cx = _.cloneDeep(validUserCtx);
        return magma_view.taskProcess("onRequest", cx, function(e, ctx) {
          var expected, jobdone, stack;
          if (e) {
            return done(e);
          } else {
            stack = ctx.stack;
            jobdone = false;
            expected = /^(A1|B2D4|C3D4|D4C3|E5){4}$/;
            if (expected.test(stack).should.be["true"]) {
              jobdone = true;
            }
            jobdone.should.be["true"];
            return done();
          }
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=magma-view_test.map
